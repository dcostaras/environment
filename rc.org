#+author: Donavan-Ross Costaras
#+email: d.costaras@gmail.com

* Emacs
** TODO turn "_" into the vim action to comment with #_ an object
** TODO turn "p" into the vim action to comment with #p an object
** TODO set C-M-\ to nil to train self to use indentation evil verb "="
** TODO org src buffers to be added to workspace
** TODO cider switch to last buffer from repl (C-c C-z) should do so across frames
** TODO C-h sometimes doesn't work as back level in counsel find file
** TODO figure out how to have uncharged time in org clocktables
** TODO clj-kondo/clojure-lsp can't find reference if it's used a default destructuring arg

currency-format is in the :or map of the next function
#+begin_src clojure
(defn currency-format [value]
  (ft/format-number value {:currency? true
                           :round-to  0
                           :dash?     false}))

(defn unroll-row [content key & {:keys [format-fn classes style]
                                 :or   {format-fn currency-format
                                        classes   []
                                        style     {}}}]
  (map
   (fn [x] (dom/td {:classes classes :style style}
                   (format-fn (key x))))
   content))
#+end_src

** TODO clj-kondo/clojure-lsp clean-ns doesn't see aliases used in keywords as usage and removes the entries
** TODO clj-kondo/clojure-lsp can't autocomplete locals
** TODO auto complete refers in ns forms
** TODO auto complete should support symbols in refer blocks
** TODO eval last/current sexp text object
so one can yank eval last sexp
** TODO Investigate with-undo-collapse
(defmacro with-undo-collapse (&rest body)
  "Like `progn' but perform BODY with undo collapsed."
  (declare (indent 0) (debug t))
  (let ((handle (make-symbol "--change-group-handle--"))
        (success (make-symbol "--change-group-success--")))
    `(let ((,handle (prepare-change-group))
            ;; Don't truncate any undo data in the middle of this.
            (undo-outer-limit nil)
            (undo-limit most-positive-fixnum)
            (undo-strong-limit most-positive-fixnum)
            (,success nil))
       (unwind-protect
         (progn
           (activate-change-group ,handle)
           (prog1 ,(macroexp-progn body)
             (setq ,success t)))
         (if ,success
           (progn
             (accept-change-group ,handle)
             (undo-amalgamate-change-group ,handle))
           (cancel-change-group ,handle))))))

** Lexical binding

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
;;; -*- lexical-binding: t; -*-
#+end_src

** config

*** Settings
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq

 ;; Place your private configuration here! Remember, you do not need to run 'doom
 ;; sync' after modifying this file!

 ;; Some functionality uses this to identify you, e.g. GPG configuration, email
 ;; clients, file templates and snippets.
 user-full-name "Donavan-Ross Costaras"
 user-mail-address "d.costaras@gmail.com"

 ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
 ;; are the three important ones:
 ;;
 ;; + `doom-font'
 ;; + `doom-variable-pitch-font'
 ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
 ;;   presentations or streaming.
 ;;
 ;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
 ;; font string. You generally only need these two:
 ;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
 ;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

 ;; There are two ways to load a theme. Both assume the theme is installed and
 ;; available. You can either set `doom-theme' or manually load a theme with the
 ;; ; If you use `org' and don't want your org files in the default location below,
 ;; change `org-directory'. It must be set before org loads!
 org-directory "~/org/"
 doom-font (font-spec :family "Fira Code" :size 13)
 display-line-numbers-type 'visual

 ;; IMO, modern editors have trained a bad habit into us all: a burning
 ;; need for completion all the time -- as we type, as we breathe, as we
 ;; pray to the ancient ones -- but how often do you *really* need that
 ;; information? I say rarely. So opt for manual completion:
 company-idle-delay nil

 ;; lsp-ui-sideline is redundant with eldoc and much more invasive, so
 ;; disable it by default.
 lsp-ui-sideline-enable nil
 lsp-enable-symbol-highlighting nil

 ;; More common use-case
 evil-ex-substitute-global t

 delete-by-moving-to-trash t
 truncate-string-ellipsis "…"
 auto-save-default t)

;; More modern fill column length
(setq-default fill-column 100)

(setq ns-use-native-fullscreen nil)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;;
#+end_src

**** Fullscreen

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(add-hook! 'emacs-startup-hook #'toggle-frame-fullscreen)
#+end_src

*** MacOS

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)
#+end_src

*** Org

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! org
  (setq org-src-window-setup 'current-window)
  ;; (setq org-time-clocksum-use-effort-durations t)
  (setq org-time-clocksum-use-effort-durations nil)
  (setq org-duration-format '(
                              ;; ("d" . nil)
                              ("h" . nil)
                              (special . 2)
                              ;; ("min" . t)
                              ))

  (setq org-effort-durations
        `(
          ;; ("min" . 1)
          ("h" . 60)
          ;; eight-hour days
          ;; ("d" . ,(* 60 8))
          ;; five-day work week
          ;; ("w" . ,(* 60 8 5))
          ;; four weeks in a month
          ;; ("m" . ,(* 60 8 5 4))
          ;; work a total of 12 months a year --
          ;; this is independent of holiday and sick time taken
          ;; ("y" . ,(* 60 8 5 4 12))
          ))
  (setq org-startup-folded t)
  (use-package! worf)
  (use-package! ob-http)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (http . t)))

  (defun bjm/worf-insert-internal-link ()
    "Use ivy to insert a link to a heading in the current `org-mode' document. Code is based on `worf-goto'."
    (interactive)
    (let ((cands (worf--goto-candidates)))
      (ivy-read "Heading: " cands
                :action 'bjm/worf-insert-internal-link-action)))

  (defun bjm/worf-insert-internal-link-action (x)
    "Insert link for `bjm/worf-insert-internal-link'"
    ;; go to heading
    (save-excursion
      (goto-char (cdr x))
      ;; store link
      (call-interactively 'org-store-link))
    ;; return to original point and insert link
    (org-insert-last-stored-link 1)
    ;; org-insert-last-stored-link adds a newline so delete this
    (delete-backward-char 1))


  (map! :map org-src-mode-map
        "C-c C-c" nil
        "C-c '" #'org-edit-src-exit)


;; (setq org-directory "~/org")
;; (setq org-agenda-files (list "~/org/inbox.org"))
;; (setq org-capture-templates
;;       `(("i" "Inbox" entry  (file "inbox.org")
;;          ,(concat "* TODO %?\n"
;;                   "/Entered on/ %U"))))
;; (map! "C-c c" 'org-capture)
;; (defun org-capture-inbox ()
;;   (interactive)
;;   (call-interactively 'org-store-link)
;;   (org-capture nil "i"))

;; (map! "C-c i" 'org-capture-inbox)

;; (map! "C-c a" 'org-agenda)
;; (setq org-agenda-hide-tags-regexp ".")
;; (setq org-agenda-prefix-format
;;       '((agenda . " %i %-12:c%?-12t% s")
;;         (todo   . " ")
;;         (tags   . " %i %-12:c")
;;         (search . " %i %-12:c")))
  )
#+end_src

*** Auto dim other buffers

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! auto-dim-other-buffers)
#+end_src

*** Spelling

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq ispell-dictionary "en"
      ispell-personal-dictionary "~/env/spelling/.pws")
#+end_src

*** Evil

**** Hydra paste

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(defhydra hydra-paste
  (:color red
   :hint nil)
  "\n[%s(length kill-ring-yank-pointer)/%s(length kill-ring)] \
 [_C-j_/_C-k_] cycles through yanked text, [_p_/_P_] pastes the same text \
 above or below. Anything else exits."
  ("C-j" evil-paste-pop)
  ("C-k" evil-paste-pop-next)
  ("p" evil-paste-after)
  ("P" evil-paste-before))

(map! :nv "p" #'hydra-paste/evil-paste-after
      :nv "P" #'hydra-paste/evil-paste-before)

#+end_src

**** Evil escape

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! evil-escape
  :init (progn
          (setq evil-escape-key-sequence "jk")
          (setq evil-escape-unordered-key-sequence t)))
#+end_src

**** Motion trainer

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
;; (global-evil-motion-trainer-mode 1)
(setq evil-motion-trainer-threshold 6)
#+end_src

*** Ivy

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! ivy

  (setq ivy-extra-directories '())

  (map! "C-h" :map ivy-minibuffer-map #'counsel-up-directory)
  (map! :n "/" #'+default/search-buffer)

  (defun ivy-yank-action (x)
    (kill-new x))

  (defun ivy-copy-to-buffer-action (x)
    (with-ivy-window
      (insert x)))

  ;; Ivy actions only working when called from C-M-o (ivy-dispatching-call)
  (ivy-set-actions
   t
   '(("i" ivy-copy-to-buffer-action "insert")
     ("y" ivy-yank-action "yank"))))
#+end_src

*** Aggressive indent

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! aggressive-indent
  :config (add-hook! emacs-lisp-mode
            (aggressive-indent-mode 1)))
#+end_src

*** Magit

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! magit
  :init
  (setq auth-sources '("~/.authinfo"))
  :config
  (progn
    (magit-todos-mode)))

(use-package! magit-delta
  :after magit
  :config
  (setq
   magit-delta-default-dark-theme "OneHalfDark"
   magit-delta-default-light-theme "OneHalfLight")
  (magit-delta-mode))
#+end_src

*** LSP

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! lsp-mode
  (push "\\.shadow-cljs" lsp-file-watch-ignored)
  (push "\\.clj-kondo" lsp-file-watch-ignored)
  (push "\\.lsp" lsp-file-watch-ignored)
  (push "\\.cpcache" lsp-file-watch-ignored)
  (push "resources" lsp-file-watch-ignored)

  (setq lsp-ui-peek-always-show t)
  (setq lsp-ui-sideline-show-hover t))
#+end_src

*** Scheme/Racket

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! racket
  (map! :map racket-mode-map "C-c C-c" #'racket-send-definition))

(defun mit-scheme ()
  (interactive)
  (run-scheme "/Applications/scheme.app/Contents/Resources/mit-scheme"))
#+end_src

(defvar-local prev-scheme-file nil)

(defun my-scheme-load-file ()
  "Load `buffer-file-name' into current inferior Scheme process
and switch to REPL"
  (interactive)
  (evil-normal-state) ;; comment line if not using evil mode
  (save-buffer)
  (comint-send-string (scheme-proc) (concat "(load \""
                                           (buffer-file-name)
                                           "\")\n"))
  (switch-to-scheme-interp))

(add-hook 'scheme-mode-hook (lambda ()
                              (local-set-key (kbd "C-h C-j")
                                             'my-scheme-load-file)))

(defun switch-to-scheme-interp ()
  (let ((initial-buffer (current-buffer)))
    (switch-to-buffer-other-window "*scheme*")
      (setq prev-scheme-file initial-buffer)))

(defun switch-to-scheme-file ()
  (interactive)
  (if prev-scheme-file
      (switch-to-buffer-other-window prev-scheme-file)
    (message "No previous buffer.")))

(add-hook 'inferior-scheme-mode-hook
          (lambda () (local-set-key (kbd "C-h C-j")
                                    'switch-to-scheme-file)))

*** Clojure

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! cider

  ;; Not used
  ;; (defconst my-clojure-def-and-name-regex
  ;;   (rx
  ;;    (seq bol
  ;;         (* blank) "(" (* blank)
  ;;         (group
  ;;          (or
  ;;           "specification"
  ;;           (and "def" (* (syntax word))))))))


  (defun cider-interactive-eval-clj (form &optional callback bounds additional-params)
    "Evaluate FORM and dispatch the response to CALLBACK.
If the code to be evaluated comes from a buffer, it is preferred to use a
nil FORM, and specify the code via the BOUNDS argument instead.

This function is the main entry point in CIDER's interactive evaluation
API.  Most other interactive eval functions should rely on this function.
If CALLBACK is nil use `cider-interactive-eval-handler'.
BOUNDS, if non-nil, is a list of two numbers marking the start and end
positions of FORM in its buffer.
ADDITIONAL-PARAMS is a map to be merged into the request message.

If `cider-interactive-eval-override' is a function, call it with the same
arguments and only proceed with evaluation if it returns nil."
    (let ((form  (or form (apply #'buffer-substring-no-properties bounds)))
          (start (car-safe bounds))
          (end   (car-safe (cdr-safe bounds))))
      (when (and start end)
        (remove-overlays start end 'cider-temporary t))
      (unless (and cider-interactive-eval-override
                   (functionp cider-interactive-eval-override)
                   (funcall cider-interactive-eval-override form callback bounds))
        (cider-map-repls :clj
          (lambda (connection)
            (cider--prep-interactive-eval form connection)
            (cider-nrepl-request:eval
             form
             (or callback (cider-interactive-eval-handler nil bounds))
             ;; always eval ns forms in the user namespace
             ;; otherwise trying to eval ns form for the first time will produce an error
             (if (cider-ns-form-p form) "user" (cider-current-ns))
             (when start (line-number-at-pos start))
             (when start (cider-column-number-at-pos start))
             (seq-mapcat #'identity additional-params)
             connection))))))

  (defun my-cider-reset ()
    (interactive)
    (projectile-save-project-buffers)
    (cider-interactive-eval-clj "(user/restart-server)"))

  ;;; Three ways to eval a string:
  ;; Evals in environment but doesn't print
  ;; (cider-nrepl-sync-request:eval "(form)")
  ;; Evals in environment and prints
  ;; (cider-interactive-eval-clj "(form)")
  ;; Inserts literal form into repl and eval (second arg)
  ;; (cider-insert-in-repl "(form)" t)

  (defun my-cider-start-system ()
    (interactive)
    (cider-connect-clj)
    (cider-insert-in-repl "(start-server)" t)
    (cider-connect-sibling-clj '())
    (cider-repl-switch-to-other)
    (cider-insert-in-repl "(start-client)" t))

  (map! (:localleader
         (:map (clojure-mode-map clojurescript-mode-map)
          (:prefix ("r" . "repl")
           "r" #'my-cider-reset
           "s" #'my-cider-start-system))))

  (defun my-cider-load-debug-tools ()
    (interactive)
    (cider-interactive-eval
     "(require '[com.gfredericks.debug-repl :refer [break! unbreak! unbreak!!]])
      (require '[hashp.core])"))

  (setq cider-clojure-cli-global-options "-A:debug-tools")
  (setq cider-shadow-cljs-global-options "-A:debug-tools")
  (add-to-list 'cider-repl-init-code "(require,'hashp.core)")
  (add-to-list 'cider-jack-in-nrepl-middlewares "com.gfredericks.debug-repl/wrap-debug-repl")

  (setq cider-auto-select-test-report-buffer nil)
  (setq cider-save-file-on-load t)
  (setq clojure-toplevel-inside-comment-form t)
  (setq org-babel-clojure-backend 'cider)
  (setq lsp-lens-enable t)

  ;; TODO test this
  ;; see https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/
  ;; (use-package! clj-refactor
  ;;   :after clojure-mode
  ;;   :config
  ;;   (set-lookup-handlers! 'clj-refactor-mode nil))

  (define-clojure-indent
    ;; Fulcro
    (>defn :defn)
    (defmutation [1 :form :form [1]])
    ;; (pc/defmutation [2 :form :form [1]])

    ;; Fulcro-spec
    (specification [1])
    (component [1])
    (behavior [1])
    (when-mocking '(0))
    (assertions [0])

    (thrown-with-data? [1])
    (not-thrown-with-data? [1])

    ;; JRA
    (system/let [1])
    (clet [1])

    (swap!-> [1])

    (comment :defn)

    ;; compojure
    (context 2)
    (POST 2)
    (GET 2)
    (PUT 2))

  (defvar kaocha-windows-rx (rx bol (* any) "kaocha" (* any)))

  (setq display-buffer-alist '((kaocha-windows-rx (display-buffer-pop-up-frame display-buffer-reuse-window display-buffer-same-window))))

  (setq cider-test-defining-forms '("deftest" "defspec" "specification"))

  (defun tdd-test ()
    "Thin wrapper around `cider-test-run-tests'."
    (when (cider-connected-p)
      (let ((cider-auto-select-test-report-buffer nil)
            (cider-test-show-report-on-success nil))
        (cider-test-run-ns-tests nil 'soft))))

  (defun my-kaocha-runner--show-details-window (original-buffer min-height)
    "Show details from the test run with a MIN-HEIGHT, but switch back to ORIGINAL-BUFFER afterwards."
    (let ((window (get-buffer-window kaocha-runner--out-buffer t)))
      (when (not window)
        (let ((window (split-window-vertically -4)))
          (select-window window)
          (switch-to-buffer kaocha-runner--out-buffer)
          (set-window-dedicated-p window t)))))

  (defun my-kaocha-runner--run-tests (testable-sym &optional run-all? background? original-buffer)
    "Run kaocha tests.

If RUN-ALL? is t, all tests are run, otherwise attempt a run with the provided
TESTABLEY-SYM. In practice TESTABLEY-SYM can be a test id, an ns or an ns/test-fn.

If BACKGROUND? is t, we don't message when the tests start running.

Given an ORIGINAL-BUFFER, use that instead of (current-buffer) when switching back."
    (interactive)
    (kaocha-runner--clear-buffer kaocha-runner--out-buffer)
    (kaocha-runner--clear-buffer kaocha-runner--err-buffer)
    (kaocha-runner--eval-clojure-code
     (format kaocha-runner-repl-invocation-template
             (if run-all?
                 (format "(kaocha.repl/run-all %s)" kaocha-runner-extra-configuration)
               (format
                "(kaocha.repl/run %s %s)"
                testable-sym
                kaocha-runner-extra-configuration)))
     (let ((original-buffer (or original-buffer (current-buffer)))
           (done? nil)
           (any-errors? nil)
           (shown-details? nil)
           (the-value nil)
           (start-time (float-time)))
       (unless background?
         (if run-all?
             (message "Running all tests ...")
           (message "[%s] Running tests ..." testable-sym)))
       (lambda (response)
         (nrepl-dbind-response response (value out err status)
           (when out
             (kaocha-runner--insert kaocha-runner--out-buffer out)
             (when (let ((case-fold-search nil))
                     (string-match-p kaocha-runner--fail-re out))
               (setq any-errors? t))
             (when (and (< kaocha-runner-long-running-seconds
                           (- (float-time) start-time))
                        (not shown-details?))
               (setq shown-details? t)
               (kaocha-runner--show-details-window original-buffer kaocha-runner-ongoing-tests-win-min-height)))
           (when err
             (kaocha-runner--insert kaocha-runner--err-buffer err))
           (when value
             (setq the-value value))
           (when (and status (member "done" status))
             (setq done? t))
           (when done?
             (if the-value
                 (kaocha-runner--show-report the-value (unless run-all? testable-sym))
               (unless (get-buffer-window kaocha-runner--err-buffer 'visible)
                 (message "Kaocha run failed. See error window for details.")
                 (switch-to-buffer-other-window kaocha-runner--err-buffer))))
           (when done?
             (if any-errors?
                 (my-kaocha-runner--show-details-window original-buffer kaocha-runner-failure-win-min-height))))))))

  (defvar my-test-runner 'kaocha)

  (defun my-execute-test (ns test-var code-buffer)
    (cond ((eq my-test-runner 'kaocha)
           (my-kaocha-runner--run-tests
            (kaocha-runner--testable-sym ns test-var (eq major-mode 'clojurescript-mode))
            nil
            t
            code-buffer))
          ((eq my-test-runner 'cider)
           (progn
             (cider-test-update-last-test ns (list test-var))
             (cider-test-execute ns (list test-var))))))

  (defvar my-last-executed-test nil)

  (defun my-run-test ()
    "Run Clojure test at point.

Supports the fulcro-spec `specification' macro"
    (interactive)
    (let* ((ns  (clojure-find-ns))
           (code-buffer (current-buffer)))
      (when ns
        (cider-interactive-eval
         (concat "(clojure.core/let [{:keys [name test]} (clojure.core/meta "
                 (cider-defun-at-point)
                 ")] (clojure.core/when test name))")
         (nrepl-make-response-handler
          code-buffer
          (lambda (_buffer test-var)
            (if (not (string= "nil" test-var))
                (progn
                  (setq my-last-executed-test (list ns test-var))
                  (my-execute-test ns test-var code-buffer))
              (when my-last-executed-test
                (my-execute-test
                 (car my-last-executed-test)
                 (cadr my-last-executed-test)
                 code-buffer))))
          nil
          nil
          (lambda (_buffer)))))))

  (define-minor-mode tdd-mode
    "Run all tests whenever a file is loaded."
    nil nil nil
    :global t
    (if tdd-mode
        (progn
          (advice-add 'cider-eval-defun-at-point :after #'my-run-test)
          (add-hook 'cider-file-loaded-hook #'tdd-test))
      (progn
        (advice-remove 'cider-eval-defun-at-point #'my-run-test)
        (remove-hook 'cider-file-loaded-hook #'tdd-test))))

  (define-minor-mode pprint-eval-mode
    "When active swaps `cider-eval-defun-at-point' with `cider-pprint-eval-defun-at-point'"
    nil nil nil
    :global t
    (if pprint-eval-mode
        (map! :mode (clojure-mode clojurec-mode clojurescript-mode)
              [remap cider-eval-defun-at-point] #'cider-pprint-eval-defun-at-point
              [remap cider-eval-last-sexp] #'cider-pprint-eval-last-sexp)
      (map! :mode (clojure-mode clojurec-mode clojurescript-mode)
            [remap cider-pprint-eval-defun-at-point] #'cider-eval-defun-at-point
            [remap cider-pprint-eval-last-sexp] #'cider-eval-last-sexp)))

  (advice-add 'cider-pprint-eval-last-sexp :around 'evil-collection-cider-last-sexp)

  (use-package kaocha-runner
    :init
    (bind-keys :prefix-map ar-emacs-kaocha-prefix-map
               :prefix "C-c k"
               ("t" . kaocha-runner-run-test-at-point)
               ("r" . kaocha-runner-run-tests)
               ("a" . kaocha-runner-run-all-tests)
               ("w" . kaocha-runner-show-warnings)
               ("h" . kaocha-runner-hide-windows)))

  (defun jet ()
    (interactive)
    (shell-command-on-region
     (region-beginning)
     (region-end)
     "jet --pretty --edn-reader-opts '{:default tagged-literal}'"
     (current-buffer)
     t
     "*jet error buffer*"
     t))

  ;; Similar to C-x C-e, but sends to REBL
  (defun rebl-eval-last-sexp ()
    (interactive)
    (let* ((bounds (cider-last-sexp 'bounds))
           (s (cider-last-sexp))
           (reblized (concat "(cognitect.rebl/inspect " s ")")))
      (cider-interactive-eval reblized nil bounds (cider--nrepl-print-request-map))))

  ;; Similar to C-M-x, but sends to REBL
  (defun rebl-eval-defun-at-point ()
    (interactive)
    (let* ((bounds (cider-defun-at-point 'bounds))
           (s (cider-defun-at-point))
           (reblized (concat "(cognitect.rebl/inspect " s ")")))
      (cider-interactive-eval reblized nil bounds (cider--nrepl-print-request-map))))

  ;; C-S-x send defun to rebl
  ;; C-x C-r send last sexp to rebl (Normally bound to "find-file-read-only"... Who actually uses that though?)
  (add-hook 'cider-mode-hook
            (lambda ()
              (local-set-key (kbd "C-S-x") #'rebl-eval-defun-at-point)
              (local-set-key (kbd "C-x C-r") #'rebl-eval-last-sexp)))

  (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
  (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
  ;; waffletower  6:03 AM
  ;; I came up with a working PoC for injections using NREPL.  Is there a more straight-forward way to accomplish this?
  ;; Untitled
  ;; (ns repl-eval.nrepl
  ;;     (:require [clojure.pprint :refer [pprint]]
  ;;      [nrepl.server :as server]
  ;;      [nrepl.core :as nrepl]
  ;;      refactor-nrepl.middleware
  ;;      cider.nrepl))
  ;; ​
  ;; (defn start
  ;;   []
  ;;   (let [server (server/start-server
  ;;                 :handler (apply server/default-handler
  ;;                                 (conj
  ;;                                  (map #'cider.nrepl/resolve-or-fail cider.nrepl/cider-middleware)
  ;;                                  #'refactor-nrepl.middleware/wrap-refactor)))
  ;;                port (:port server)]
  ;;     (with-open [cxn (nrepl/connect :port port)]
  ;;                (-> (nrepl/client cxn 1000)
  ;;                    (nrepl/message {:op "eval" :code "(require '[clojure.pprint :refer [pprint]])"})
  ;;                    nrepl/response-values))
  ;;     (spit ".nrepl-port" port)))
  ;; Collapse
  ;; 6:04
  ;; The injection in this case is requiring pprint.
  ;; waffletower  6:09 AM
  ;; The code is easily referenced in a deps.edn alias:
  ;; :inject {:extra-deps {waffletower/repl-eval {:local/root "../repl-eval/"}
  ;; nrepl/nrepl {:mvn/version "0.7.0"}
  ;; refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}
  ;; cider/cider-nrepl {:mvn/version "0.25.1"}}
  ;; :main-opts ["-m" "repl-eval.nrepl"]}
  ;; While I could refactor this to instrument variable middleware and injection forms, is there some hook I am missing here?  It was much much easier and cleaner to accomplish REPL initialization with leiningen.
  )

(defun guardrails-font-lock ()
  (font-lock-add-keywords
   nil
   `((,(rx "("
           (* (syntax whitespace))
           (group ">def" (optional "n"))
           (+ (syntax whitespace))
           (group (+ (or (syntax word) (syntax symbol)))))
      (1 font-lock-keyword-face)
      (2 font-lock-function-name-face)))))

(add-hook 'clojure-mode-hook #'guardrails-font-lock)

(after! clojure
  (global-subword-mode 1)
  (after! aggressive-indent
    (add-hook! clojure-mode
      (aggressive-indent-mode 1)))

  ;; TODO test this
  ;; see https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/
  ;; (use-package! cider
  ;;   :config
  ;;   (set-lookup-handlers! 'cider-mode nil))

  (after! lsp-mode
    (after! lsp-ui-mode
      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))))
#+end_src

*** Lispy

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(lispyville-set-key-theme
 '(operators
   c-w
   (prettify insert)
   paredit))

(use-package! evil-lispy
  :config (add-hook! '(clojure-mode clojurec-mode clojurescript-mode) #'evil-lispy-mode))

;; (add-hook! 'evil-escape-inhibit-functions
;;   (defun +lispy-inhibit-evil-escape-fn ()
;;     (and lispy-mode (evil-insert-state-p))))

(defun my-insert-hash-print (arg)
  (interactive "p")
  (if (lispy-left-p)
      (insert "#p ")
    (self-insert-command arg)))

(map! :map lispy-mode-map-special :i "p" #'my-insert-hash-print)
(remove-hook! 'evil-escape-inhibit-functions #'+lispy-inhibit-evil-escape-fn)
#+end_src

*** Dired/Eshell

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(defun my-buffer-mode (&optional buffer-or-name)
  "Return the major mode associated with a buffer.
If buffer-or-name is nil return current buffer's mode."
  (interactive)
  (buffer-local-value
   'major-mode
   (if buffer-or-name
       (get-buffer buffer-or-name)
     (current-buffer))))

(defun my-buffer-path ()
  (file-name-directory (or  (buffer-file-name) default-directory)))

(defun eshell-cwd ()
  "Set the eshell directory to the current buffer.

  Usage: M-x eshell-cwd"
  (interactive)
  (let ((path (my-buffer-path)))
    (print path)
    (switch-to-buffer "*eshell*")
    (cd path)
    (eshell-emit-prompt)))

(defun dired-cwd ()
  (interactive)
  (let ((path (file-name-directory (or  (buffer-file-name) default-directory))))
    (dired path)))

(defun dired-or-eshell ()
  (interactive)
  (let ((mode (my-buffer-mode)))
    (cond
     ((eq 'eshell-mode mode) (dired-cwd))
     ((eq 'dired-mode mode) (eshell-cwd))
     (t (eshell-cwd)))))

(defun my-eshell ()
  (interactive)
  (unless (persp-with-name-exists-p "shell")
    (+workspace/load "shell"))
  (+workspace-switch "shell"))

(map! :n "-" #'my-eshell
      :map dired-mode-map :n "-" #'dired-or-eshell)
#+end_src

*** Theme

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq doom-theme 'doom-monokai-pro)
(load-theme 'doom-monokai-pro t)

(custom-theme-set-faces! '(doom-monokai-pro)
  `(line-number :foreground ,(doom-color 'green))
  `(line-number-current-line :foreground ,(doom-color 'red))
  ;; `(mode-line :foreground ,(doom-color 'blue))
                                        ;`(mode-line-buffer-id :foreground ,(doom-color 'fg) :background "#000000")
  ;; '(mode-line-success-highlight :background \"#00FF00\")
  ;; '(org-tag :background \"#4499FF\")
  ;; '(org-ellipsis :inherit org-tag)
  ;; '(which-key-docstring-face :inherit font-lock-comment-face)
  )
#+end_src

** Lispy bindings
#+NAME: lispy-bindings
| key | function                      | column   |
|-----+-------------------------------+----------|
| <   | lispy-barf                    |          |
| A   | lispy-beginning-of-defun      |          |
| j   | lispy-down                    |          |
| Z   | lispy-edebug-stop             |          |
| B   | lispy-ediff-regions           |          |
| G   | lispy-goto-local              |          |
| h   | lispy-left                    |          |
| N   | lispy-narrow                  |          |
| y   | lispy-occur                   |          |
| o   | lispy-other-mode              |          |
| J   | lispy-outline-next            |          |
| K   | lispy-outline-prev            |          |
| P   | lispy-paste                   |          |
| l   | lispy-right                   |          |
| I   | lispy-shifttab                |          |
| >   | lispy-slurp                   |          |
| SPC | lispy-space                   |          |
| xB  | lispy-store-region-and-buffer |          |
| u   | lispy-undo                    |          |
| k   | lispy-up                      |          |
| v   | lispy-view                    |          |
| V   | lispy-visit                   |          |
| W   | lispy-widen                   |          |
| D   | pop-tag-mark                  |          |
| x   | see                           |          |
| L   | unbound                       |          |
| U   | unbound                       |          |
| X   | unbound                       |          |
| Y   | unbound                       |          |
| H   | lispy-ace-symbol-replace      | Edit     |
| c   | lispy-clone                   | Edit     |
| C   | lispy-convolute               | Edit     |
| n   | lispy-new-copy                | Edit     |
| O   | lispy-oneline                 | Edit     |
| r   | lispy-raise                   | Edit     |
| R   | lispy-raise-some              | Edit     |
| \   | lispy-splice                  | Edit     |
| S   | lispy-stringify               | Edit     |
| i   | lispy-tab                     | Edit     |
| xj  | lispy-debug-step-in           | Eval     |
| xe  | lispy-edebug                  | Eval     |
| xT  | lispy-ert                     | Eval     |
| e   | lispy-eval                    | Eval     |
| E   | lispy-eval-and-insert         | Eval     |
| xr  | lispy-eval-and-replace        | Eval     |
| p   | lispy-eval-other-window       | Eval     |
| q   | lispy-ace-paren               | Move     |
| z   | lispy-knight                  | Move     |
| s   | lispy-move-down               | Move     |
| w   | lispy-move-up                 | Move     |
| t   | lispy-teleport                | Move     |
| Q   | lispy-ace-char                | Nav      |
| -   | lispy-ace-subword             | Nav      |
| a   | lispy-ace-symbol              | Nav      |
| b   | lispy-back                    | Nav      |
| d   | lispy-different               | Nav      |
| f   | lispy-flow                    | Nav      |
| F   | lispy-follow                  | Nav      |
| g   | lispy-goto                    | Nav      |
| xb  | lispy-bind-variable           | Refactor |
| xf  | lispy-flatten                 | Refactor |
| xc  | lispy-to-cond                 | Refactor |
| xd  | lispy-to-defun                | Refactor |
| xi  | lispy-to-ifs                  | Refactor |
| xl  | lispy-to-lambda               | Refactor |
| xu  | lispy-unbind-variable         | Refactor |
| M   | lispy-multiline               | Other    |
| xh  | lispy-describe                | Other    |
| m   | lispy-mark-list               | Other    |

 #+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el :var bindings=lispy-bindings :colnames yes=
(eval
 (append
  '(defhydra my/lispy-cheat-sheet (:hint nil :foreign-keys run)
     ("<f12>" nil :exit t))
  (cl-loop for x in bindings
           unless (string= "" (elt x 2))
           collect
           (list (car x)
                 (intern (elt x 1))
                 (when (string-match "lispy-\\(?:eval-\\)?\\(.+\\)"
                                     (elt x 1))
                   (match-string 1 (elt x 1)))
                 :column
                 (elt x 2)))))
(with-eval-after-load "lispy"
  (define-key lispy-mode-map (kbd "<f12>") 'my/lispy-cheat-sheet/body))
   #+END_SRC

** init

#+begin_src emacs-lisp :tangle ~/.doom.d/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input

       :completion
       company             ; the ultimate code completion backend
       ivy                 ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       doom-quit           ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       fill-column         ; a `fill-column' indicator
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter           ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       window-select       ; TODO check +numbers visually switch windows
       workspaces          ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy               ; vim for lisp, for people who don't like vim
       ;;multiple-cursors    ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       word-wrap           ; soft wrapping with language-aware indent

       :emacs
       dired               ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       ibuffer             ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       eshell              ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm               ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +aspell
              +everywhere) ; tasing you for misspelling mispelling
       grammar             ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)       ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       (magit +forge)      ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       prodigy             ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       taskrunner          ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       (clojure +lsp)      ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pomodoro
            +dragndrop
            +pandoc)       ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket              ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +css)          ; the tubes
       yaml                ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

** packages

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
                                        ;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
                                        ;(package! another-package
                                        ;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
                                        ;(package! this-package
                                        ;  :recipe (:host github :repo "username/repo"
                                        ;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
                                        ;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
                                        ;(package! builtin-package :recipe (:nonrecursive t))
                                        ;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
                                        ;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
                                        ;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
                                        ;(unpin! pinned-package)
;; ...or multiple packages
                                        ;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
                                        ;(unpin! t)

(package! aggressive-indent)
(package! auto-dim-other-buffers)
(package! evil-lispy)
(package! worf)
(package! ob-http)
(package! org-download)
(package! writeroom-mode)
;; (package! pcre2el)
(package! magit-delta)
(package! kaocha-runner)
(package! evil-motion-trainer
  :recipe (:host github :repo "martinbaillie/evil-motion-trainer"))
(package! flycheck-projectile)

(unpin! lsp-mode)
#+end_src

** services

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(prodigy-define-service
  :name "fulcro template"
  :command "npx"
  :args '("shadow-cljs" "-A:cider-nrepl:debug-tools" "server")
  :cwd "~/src/fulcro-template"
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "shadow-cljs - nREPL server started on port 9000" output)
                   (prodigy-set-status service 'ready)))))

(prodigy-define-service
  :name "RAD demo"
  :command "npx"
  :args '("shadow-cljs" "-A:cider-nrepl:debug-tools" "server")
  :cwd "~/src/rad-demo/"
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "shadow-cljs - nREPL server started on port 9000" output)
                   (prodigy-set-status service 'ready)))))

(prodigy-define-service
  :name "JRA frontend"
  :command "npx"
  :args '("shadow-cljs" "-A:cider-nrepl:debug-tools" "server")
  :cwd "~/src/jra"
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "shadow-cljs - nREPL server started on port 9000" output)
                   (prodigy-set-status service 'ready)))))

(prodigy-define-service
  :name "JRA SOCKS proxy"
  :command "datomic"
  :command "printenv"
  :args '("client" "access" "jra-storage" "-p" "jra")
  ;; :args '("$AWS_ACCESS_KEY_ID")
  :cwd "~/src/jra/bin"
  ;; :env '(("LANG" "en_US.UTF-8")
  ;;        ("LC_ALL" "en_US.UTF-8"))
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t)
#+end_src

** .dir-locals

#+begin_src emacs-lisp
((nil . ((cider-clojure-cli-global-options . "-A:dev:test:kondo:debug-tools -J-Dtrace -J-Dghostwheel.enabled=true")
         (cider-custom-cljs-repl-init-form . "(shadow/repl :main)")
         (cider-default-cljs-repl . shadow-select)
         (cider-known-endpoints . (("host-a" "10.10.10.1" "7888")
                                   ("localhost" "9000"))))))
#+end_src
* Clojure environment
** Inject CIDER dependencies and middleware boot task

:tangle ~/.boot/profile.boot :ns 'nil
#+BEGIN_SRC clojure
(require 'boot.repl)

(swap! boot.repl/*default-dependencies*
       concat '[[cider/cider-nrepl "0.25.0"]
                [nrepl "0.7.0"]
                [refactor-nrepl/refactor-nrepl "2.5.0"]
                [clj-commons/pomegranate "1.2.0"]])

(swap! boot.repl/*default-middleware*
       conj
       'cider.nrepl/cider-middleware
       'refactor-nrepl.middleware/wrap-refactor)


(set-env! :dependencies '[;; [spyscope "0.1.6"]
                          [mvxcvi/puget "1.1.2"]]
          :repositories #(conj % ["elit-maven" {:url "s3p://elit-maven/repo/"}])
          :wagons '[[s3-wagon-private "1.3.2"]])
   #+END_SRC

** taps
   :tangle ~/.boot/profile.boot :ns 'nil
   #+BEGIN_SRC clojure
     (require '[puget.printer :as puget])

     (intern 'clojure.core 'pp puget.printer/cprint)

     (add-tap
      (bound-fn*
       (fn [{:keys [filename value pp]}]
         (when (and pp value)
           (puget.printer/cprint value))
         (when filename
           (spit (str filename ".edn")
                 (str (with-out-str (clojure.pprint/pprint value)) "\n")
                 :append true)))))
   #+END_SRC

** Add spyscope to local projects
   :tangle ~/.boot/profile.boot :ns 'nil
   #+BEGIN_SRC clojure
     ;; (require 'spyscope.core)
     ;; (boot.core/load-data-readers!)
   #+END_SRC

** Debug macro

   (defmacro debug
   "Print debug info."
   [& variables]
   (let [datetime "2011-12-17 01:59:37"
   naked-msg (str "Debug: " datetime " in " *file* "@" (:line
   (meta &form)))]
   (if (empty? variables)
   (println naked-msg)
   `(let [kvs# (zipmap (map #(str % " =>") '~variables)
   (vector ~@variables))]
   (println (str ~naked-msg ":") kvs#)))))

** deps

#+BEGIN_SRC clojure :tangle ~/.clojure/deps.edn :ns 'nil :mkdirp yes
;; see https://github.com/seancorfield/dot-clojure
{:mvn/repos {"sonatype" {:url "https://oss.sonatype.org/content/repositories/snapshots/"}
             "cognitect-dev-tools" {:url "https://dev-tools.cognitect.com/maven/releases/"}}
 :aliases
 { ;; pull in specific versions of Clojure:
  :1.0 {:override-deps {org.clojure/clojure {:mvn/version "1.0.0"}}}
  :1.1 {:override-deps {org.clojure/clojure {:mvn/version "1.1.0"}}}
  :1.2 {:override-deps {org.clojure/clojure {:mvn/version "1.2.1"}}}
  :1.3 {:override-deps {org.clojure/clojure {:mvn/version "1.3.0"}}}
  :1.4 {:override-deps {org.clojure/clojure {:mvn/version "1.4.0"}}}
  :1.5 {:override-deps {org.clojure/clojure {:mvn/version "1.5.1"}}}
  :1.6 {:override-deps {org.clojure/clojure {:mvn/version "1.6.0"}}}
  :1.7 {:override-deps {org.clojure/clojure {:mvn/version "1.7.0"}}}
  :1.8 {:override-deps {org.clojure/clojure {:mvn/version "1.8.0"}}}
  :1.9 {:override-deps {org.clojure/clojure {:mvn/version "1.9.0"}}}
  :1.10 {:override-deps {org.clojure/clojure {:mvn/version "1.10.0"}}}
  :1.10.1 {:override-deps {org.clojure/clojure {:mvn/version "1.10.1"}}}
  :master {:override-deps {org.clojure/clojure {:mvn/version "1.11.0-master-SNAPSHOT"}}}

  ;; testing and debugging tools:
  ;; :test {:extra-paths ["test" "src/test/clojure"]
  ;;        :extra-deps {org.clojure/test.check {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/cognitect-labs/test-runner
  ;; - run your tests: clj -A:test:runner
  :runner {:extra-deps {com.cognitect/test-runner
                        {:git/url "https://github.com/cognitect-labs/test-runner"
                         :sha "3cb0a9daf1cb746259dc8309b218f9211ad3b33b"}}
           :main-opts ["-m" "cognitect.test-runner"
                       "-d" "test"
                       "-d" "src/test/clojure"]}
  ;; see https://github.com/jonase/eastwood#running-eastwood-in-a-repl
  :eastwood {:extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}
             :main-opts ["-m" "eastwood.lint" "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}

  ;; - see https://github.com/clojure-expectations/expectations
  ;; - and https://github.com/clojure-expectations/clojure-test
  ;; - run your expectations: clj -A:test:expect:runner
  :expect {:extra-deps {expectations/expectations {:mvn/version "RELEASE"}
                        expectations/clojure-test {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/hugoduncan/criterium/
  ;; - (require '[criterium.core :refer [bench]])
  ;; - (bench (your-expression))
  :bench {:extra-deps {criterium/criterium {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as mm])
  ;; - (mm/measure (your-expression))
  :measure {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/Olical/depot
  :outdated {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
             :main-opts ["-m" "depot.outdated.main"]}

  ;; REPL-related tools:
  ;; - start a modern nREPL server on a random available port:
  ;; :nrepl {:extra-deps {nrepl/nrepl {:mvn/version "0.8.3"}
  ;;                      refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}
  ;;                      cider/cider-nrepl {:mvn/version "0.25.5"}}
  ;;         :main-opts ["-m" "nrepl.cmdline"
  ;;                     "--middleware"
  ;;                     "[com.gfredericks.debug-repl/wrap-debug-repl,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"]}
  ;; - start a legacy nREPL server on port 60606:
  :nrepl/old {:extra-deps {org.clojure/tools.nrepl {:mvn/version "RELEASE"}}
              :main-opts ["-e" "(require,'[clojure.tools.nrepl.server,:refer,[start-server]]),(start-server,:port,60606)"]}
  ;; - start a Socket REPL on port 50505:
  :socket {:jvm-opts ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]}
  ;; - start a Socket pREPL on port 40404:
  :prepl {:jvm-opts ["-Dclojure.server.repl={:port,40404,:accept,clojure.core.server/io-prepl}"]}
  ;; - see https://atom.io/packages/proto-repl
  ;; - for use with Atom/ProtoREPL: clj -A:proto:nrepl
  :proto {:extra-deps {proto-repl/proto-repl {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/bhauman/rebel-readline
  ;; - start a Rebel Readline REPL:
  :rebel {:extra-deps {com.bhauman/rebel-readline {:mvn/version "RELEASE"}}
          :main-opts ["-m" "rebel-readline.main"]}
  ;; - see https://github.com/stuarthalloway/reflector
  :reflect
  {:extra-deps {com.stuarthalloway/reflector
                {:git/url "https://github.com/stuarthalloway/reflector"
                 :sha "93a0c19b4526c1180959e940202928d35e5c3cef"}}}
  ;; - see https://github.com/bbatsov/compliment
  :comp {:extra-deps {compliment/compliment {:mvn/version "RELEASE"}}}
  ;; - see https://github.com/cognitect-labs/REBL-distro
  ;; - you need to download the REBL JAR (and update the local/root below)
  ;; - you need to be using Clojure 1.10 and either
  ;; - - Oracle JDK 8/Zulu OpenJDK 8 w/JavaFX -- use :rebl-8
  ;; - - OpenJDK 11 -- use :rebl-11
  ;; - - on Windows, use the -win versions of these aliases
  ;; - - (assumes you have REBL as /Developer/REBL/latest/REBL.jar
  ;; - - on macOS/Linux and C:\Developer\REBL\latest\REBL.jar on Windows)
  :rebl-8
  {:extra-deps {org.clojure/core.async {:mvn/version "0.4.490"}
                ;; deps for file datafication (0.9.149 or later)
                org.clojure/data.csv {:mvn/version "0.1.4"}
                org.clojure/data.json {:mvn/version "0.2.3"}
                org.yaml/snakeyaml {:mvn/version "1.23"}
                com.cognitect/rebl
                ;; adjust to match your install location
                {:local/root "/Developer/REBL/latest/REBL.jar"}}
   :main-opts ["-m" "cognitect.rebl"]}
  :rebl-11
  {:extra-deps {org.clojure/core.async {:mvn/version "0.4.490"}
                ;; deps for file datafication (0.9.149 or later)
                org.clojure/data.csv {:mvn/version "0.1.4"}
                org.clojure/data.json {:mvn/version "0.2.3"}
                org.yaml/snakeyaml {:mvn/version "1.23"}
                com.cognitect/rebl
                ;; adjust to match your install location
                {:local/root "/Developer/REBL/latest/REBL.jar"}
                org.openjfx/javafx-fxml     {:mvn/version "11.0.1"}
                org.openjfx/javafx-controls {:mvn/version "11.0.1"}
                org.openjfx/javafx-graphics {:mvn/version "11.0.1"}
                org.openjfx/javafx-media    {:mvn/version "11.0.1"}
                org.openjfx/javafx-swing    {:mvn/version "11.0.1"}
                org.openjfx/javafx-base     {:mvn/version "11.0.1"}
                org.openjfx/javafx-web      {:mvn/version "11.0.1"}}
   :main-opts ["-m" "cognitect.rebl"]}
  :rebl-8-win
  {:extra-deps {org.clojure/core.async {:mvn/version "0.4.490"}
                ;; deps for file datafication (0.9.149 or later)
                org.clojure/data.csv {:mvn/version "0.1.4"}
                org.clojure/data.json {:mvn/version "0.2.3"}
                org.yaml/snakeyaml {:mvn/version "1.23"}
                com.cognitect/rebl
                ;; adjust to match your install location
                {:local/root "C:\\Developer\\REBL\\latest\\REBL.jar"}}
   :main-opts ["-m" "cognitect.rebl"]}
  :rebl-11-win
  {:extra-deps {org.clojure/core.async {:mvn/version "0.4.490"}
                ;; deps for file datafication (0.9.149 or later)
                org.clojure/data.csv {:mvn/version "0.1.4"}
                org.clojure/data.json {:mvn/version "0.2.3"}
                org.yaml/snakeyaml {:mvn/version "1.23"}
                com.cognitect/rebl
                ;; adjust to match your install location
                {:local/root "C:\\Developer\\REBL\\latest\\REBL.jar"}
                org.openjfx/javafx-fxml     {:mvn/version "11.0.1"}
                org.openjfx/javafx-controls {:mvn/version "11.0.1"}
                org.openjfx/javafx-graphics {:mvn/version "11.0.1"}
                org.openjfx/javafx-media    {:mvn/version "11.0.1"}
                org.openjfx/javafx-swing    {:mvn/version "11.0.1"}
                org.openjfx/javafx-base     {:mvn/version "11.0.1"}
                org.openjfx/javafx-web      {:mvn/version "11.0.1"}}
   :main-opts ["-m" "cognitect.rebl"]}

  :deps           ; to get access to clojure.tools.deps.alpha.repl/add-lib
  ;; - now you can add new deps to a running REPL:
  ;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
  ;; (add-lib 'some/library {:mvn/version "RELEASE"})
  ;; - and you can git deps too; here's how to get the master version of a lib:
  ;; (require '[clojure.tools.gitlibs :as gitlibs])
  ;; (defn load-master [lib]
  ;;   (let [git (str "https://github.com/" lib ".git")]
  ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
  ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
  ;; (load-master 'clojure/tools.trace)
  {:extra-deps {org.clojure/tools.deps.alpha
                {:git/url "https://github.com/clojure/tools.deps.alpha"
                 :sha "148cab8f154711f8495bd632ebdc53a14dff7f09"}}}
  :spec2                               ; to get access to the latest spec-alpha2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha "9dc3344bfe6d13213bdb15ca2e7680cd8eb439e3"}}}
  ;; start the Liquid Clojure editor
  ;; - see https://github.com/mogenslund/liquid
  :liquid
  {:extra-deps {mogenslund/liquid {:mvn/version "RELEASE"}}
   :main-opts ["-m" "dk.salza.liq.core"]}

  ;; project creation from templates:
  ;; - see https://github.com/seancorfield/clj-new
  ;; - create an application project:
  ;;   - clj -A:new app myname/myapp
  ;;   - cd myapp
  ;;   - clj -m myname.myapp # run it!
  ;;   - clj -A:test:runner # run the tests!
  ;; - create a library project:
  ;;   - clj -A:new lib myname/my-cool-lib
  ;;   - cd my-cool-lib
  ;;   - clj -A:test:runner # run the tests!
  :new {:extra-deps {seancorfield/clj-new {:mvn/version "RELEASE"}}
        :main-opts ["-m" "clj-new.create"]
        :exec-fn clj-new/create
        :exec-args {:template "app"}}

  ;; uberjar building:
  ;; - see https://github.com/seancorfield/depstar for a minimalist approach:
  ;;   - clj -A:uberjar result.jar
  ;; - to run it:
  ;;   - java -cp result.jar clojure.main -m mymain.namespace
  ;; - build a library JAR:
  ;;   - clj -A:jar result-lib.jar
  :uberjar {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
            :main-opts ["-m" "hf.depstar.uberjar"]}
  :jar {:extra-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
        :main-opts ["-m" "hf.depstar.jar"]}

  ;; - inspired by Ruby's -pne command line option which lets you process lines of stdin bound to $_
  ;; - usage: cat file-of-numbers.txt | clj -Mpne -e '($ (-> $_ Long/parseLong inc))'
  :pne {:main-opts,["-e","(defmacro,$,[&,body],(list,'while,(list,'when-let,'[$_,(read-line)],(let,[v,(gensym)],(list,'let,(vector,v,(list*,'do,body)),(list,'println,v))),'$_)))"]}

  :repl {:main-opts ["-e" "(require,'[clojure.main,:as,m])(m/repl,:init,#(apply,require,m/repl-requires),:eval,(fn,[form],(do,(require,'[clojure.pprint,:refer,[pp]])(eval,form))))"]}

  :rebl {:extra-deps {com.cognitect/rebl          {:mvn/version "0.9.242"}
                      org.openjfx/javafx-fxml     {:mvn/version "15-ea+6"}
                      org.openjfx/javafx-controls {:mvn/version "15-ea+6"}
                      org.openjfx/javafx-swing    {:mvn/version "15-ea+6"}
                      org.openjfx/javafx-base     {:mvn/version "15-ea+6"}
                      org.openjfx/javafx-web      {:mvn/version "15-ea+6"}}
         :main-opts ["-m" "cognitect.rebl"]}

  :rebl-jdk8 {:extra-deps {com.cognitect/rebl {:mvn/version "0.9.242"}}
              :main-opts ["-m" "cognitect.rebl"]}

  :debug-tools {:extra-deps {hashp/hashp {:mvn/version "0.2.0"}
                             com.gfredericks/debug-repl {:mvn/version "0.0.11"}}}

  :cider {:extra-deps {cider/cider-nrepl {:mvn/version "0.25.5"}
                       nrepl/nrepl {:mvn/version "0.8.3"}
                       refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}}
          :main-opts ["-m" "nrepl.cmdline"
                      "-p" "8000"
                      "--middleware" "[cider.nrepl/cider-middleware,refactor-nrepl.middleware/wrap-refactor,shadow.cljs.devtools.server.nrepl/middleware]"]}

  :local/fulcro {:override-deps {com.fulcrologic/fulcro {:local/root "/Users/donavan/src/fulcro"}}}
  :local/pathom3 {:override-deps {com.wsscode/pathom3 {:local/root "/Users/donavan/src/pathom3"}}}
  :local/workshop {:override-deps {com.jordanrivertechnology/workshop {:local/root "/Users/donavan/src/workshop"}}}
  :local/carpenter {:override-deps {com.jordanrivertechnology/carpenter {:local/root "/Users/donavan/src/carpenter"}}}
  }}
#+END_SRC

** shadow

#+BEGIN_SRC clojure :tangle ~/.shadow-cljs/config.edn :ns 'nil :mkdirp yes
{:deps-aliases [:dev #_:local-fulcro :debug-tools]}
#+END_SRC

** datomic
#+begin_src clojure :tangle ~/.datomic/dev-local.edn :mkdirp yes
{:storage-dir "/Users/donavan/.datomic/data"}
#+end_src

** clj-kondo

#+begin_src clojure :tangle ~/.config/clj-kondo/config.edn :mkdirp yes
{:lint-as {com.fulcrologic.fulcro.components/defsc clojure.core/defn
           com.fulcrologic.fulcro.mutations/defmutation clojure.core/defn}}
#+end_src

** maven settings

:tangle ~/.m2/settings.xml
#+begin_src xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd">
  <servers>
    <server>
      <id>cognitect-dev-tools</id>
      <username>donavan@jordanriveradvisors.com</username>
      <password>{{ see onepassword }}</password>
    </server>
  </servers>
</settings>
#+end_src

* shell
** theme

  #+BEGIN_SRC sh :tangle ~/.zshrc
    source "$(brew --prefix antigen)/share/antigen/antigen.zsh"

    autoload antigen

    antigen use oh-my-zsh
    antigen bundle git
    antigen bundle zsh-users/zsh-completions
    antigen bundle zdharma/fast-syntax-highlighting
    antigen bundle zsh-users/zsh-autosuggestions
    antigen bundle zsh-users/zsh-history-substring-search
    antigen bundle agkozak/zsh-z

    SPACESHIP_PROMPT_ORDER=(
        user          # Username section
        dir           # Current directory section
        host          # Hostname section
        git           # Git section (git_branch + git_status)
        hg            # Mercurial section (hg_branch  + hg_status)
        exec_time     # Execution time
        line_sep      # Line break
        vi_mode       # Vi-mode indicator
        jobs          # Background jobs indicator
        exit_code     # Exit code section
        char          # Prompt character
    )
    SPACESHIP_PROMPT_ADD_NEWLINE=false
    SPACESHIP_CHAR_SYMBOL="❯"
    SPACESHIP_CHAR_SUFFIX=" "
    antigen theme denysdovhan/spaceship-prompt

    antigen apply
  #+END_SRC

** config

  #+BEGIN_SRC sh :tangle ~/.zshrc
    echo loading zsh config
    # Lines configured by zsh-newuser-install

    autoload -Uz compinit
    typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
    if [ $(date +'%j') != $updated_at ]; then
        compinit -i
    else
        compinit -C -i
    fi

    HISTFILE=$HOME/.zsh_history
    HISTSIZE=100000
    SAVEHIST=$HISTSIZE

    setopt hist_ignore_all_dups # remove older duplicate entries from history
    setopt hist_reduce_blanks # remove superfluous blanks from history items
    setopt inc_append_history # save history entries as soon as they are entered
    setopt share_history # share history between different instances of the shell
    setopt auto_cd # cd by typing directory name if it's not a command
    # setopt correct_all # autocorrect commands
    setopt auto_list # automatically list choices on ambiguous completion
    setopt auto_menu # automatically use menu completion
    setopt always_to_end # move cursor to end if word had one match
    zstyle ':completion:*' menu select # select completions with arrow keys
    zstyle ':completion:*' group-name '' # group results by category
    zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion

    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down

    bindkey '^l' forward-word
    bindkey '^h' backward-word

    # HISTFILE=~/.histfile
    # HISTSIZE=1000
    # SAVEHIST=1000
    # # End of lines configured by zsh-newuser-install
    # # The following lines were added by compinstall
    # zstyle :compinstall filename '/Users/donavan/.zshrc'

    # autoload -Uz compinit
    # compinit
    # # End of lines added by compinstall
   #+END_SRC

** aliases

  #+BEGIN_SRC sh :tangle ~/.zshrc
     alias cat="bat"
     alias p="prettybat"
  #+END_SRC

** path

#+BEGIN_SRC sh :tangle ~/.zshrc
export PATH="$PATH:/users/donavan/bin"
export PATH="$PATH:/opt/local/bin" # Intel homebrew
export PATH="$PATH:/opt/local/sbin"
export PATH="$PATH:/Library/TeX/texbin"

export PATH="/opt/homebrew/bin:$PATH" # ARM homebrew
#+END_SRC

** env setup

#+BEGIN_SRC sh :tangle ~/.zshenv
export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -XX:-OmitStackTraceInFastThrow"
export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Dapple.awt.UIElement=true"
export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Xms512m -Xmx4g"
export JAVA_HOME="/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home"
export AWS_DEFAULT_REGION=us-east-2
export AWS_REGION=us-east-2
export AWS_PROFILE=jra
source ~/.zprofile
#+END_SRC

** GPG setup
 :tangle ~/.zshrc
  #+BEGIN_SRC sh
     GPG_TTY=$(tty)
     export GPG_TTY

     unset GPG_AGENT_INFO
     unset SSH_AGENT_PID
     export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"
     gpgconf --launch gpg-agent
  #+END_SRC

** 1Password

#+begin_src sh :tangle no
eval $(op signin my)
#+end_src

** functions
*** 1password aws integration

op get item 'JRA AWS' --fields "aws_access_key_id,aws_secret_access_key" | 1password-aws

#+begin_src clojurescript :shebang #!/usr/bin/env bb :tangle ~/bin/1password-aws
(require '[cheshire.core :as json])
(require '[clojure.java.io :as io])
(require '[clojure.set :refer [rename-keys]])

(defn my-fn
  [value]
  (-> value
      (assoc "Version" 1)
      (rename-keys {"aws_access_key_id" "AccessKeyId"
                    "aws_secret_access_key" "SecretAccessKey"})))

;;One can do the following as well (note the last nil) without the -o arg to bb
(-> *in*
    json/parse-stream
    my-fn
    (json/generate-stream (io/writer *out*) {:pretty true}))
nil

;; (-> *in*
;;     json/parse-stream
;;     my-fn
;;     (json/generate-string #_(io/writer *out*) {:pretty true}))
#+end_src
*** git annex

#+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/annex-close
git annex add .
git annex lock .
git annex copy --all --to=rsync
git annex sync
#+end_src

*** doom

#+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/doom
~/.emacs.d/bin/doom "$1"
#+end_src

*** emacsen

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/spacemacs
    open /Applications/Emacs-alt-icon.app -n --args --with-profile spacemacs
  #+end_src

 ~/bin/emacs
  #+begin_src sh :shebang "#!/bin/bash" :tangle no
    open /Applications/Emacs.app --args --with-profile emacs
  #+end_src

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/emacs-config-editor
    open /Applications/Emacs-alt-icon.app -n --args --with-profile emacs
  #+end_src

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/emacs-raw
    open /Applications/Emacs.app -n --args --with-profile raw
  #+end_src

*** elit
**** elit-cli

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/elit
      . aws_creds
      /usr/local/bin/elit $*
  #+end_src

**** db connections

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/bt-manatee
    pgcli -h localhost -p 5432 manatee postgres
    #+end_src

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/bt-lionel
    pgcli -h localhost -p 5432 lionel postgres
    #+end_src

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/bt-accounts
    mycli -h localhost -P 3306 -u root -p secret-password accounts
    #+end_src

**** ebtool

   #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/ebtool
     if cd ~/src/ebtool ; then
	 . aws_creds
	 ./ebtool $*
     fi
   #+end_src

**** beethoven

   #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/fire_up
     if cd ~/src/beethoven ; then
	 . aws_creds
	 ./fire-up.sh $*
     fi
   #+end_src

*** boot
  :tangle ~/bin/boot
  #+begin_src sh :shebang "#!/bin/bash"
    . aws_creds
    /usr/local/bin/boot $*
  #+end_src

*** gpg decrypt folder

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/encrypt-folder
    read -rsp "Enter passphrase: " PASSPHRASE

    for FILE in $(find "$1" -name '*.gpg'); do
	echo "Extracting $FILE to ${FILE%.gpg}"
	echo "$PASSPHRASE" | gpg --passphrase-fd 0 --batch -d --output "${FILE%.gpg}" "$FILE"
    done
  #+end_src

*** sync movies

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/sync-movies
      rsync -ahi proxy:/root/Downloads/ ~/Movies/movies\ and\ series/
    #+end_src

*** verify
    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/verify
sudo xattr -rd com.apple.quarantine $0
    #+end_src

*** edn pretty-print

#+begin_src clojure :shebang "#!/usr/local/bin/planck" :tangle ~/bin/edn-pp
(ns eq.core
  (:require [cljs.pprint :refer [pprint]]
            [cljs.reader :as edn]
            [planck.core :as planck :refer [*in* slurp]]
            [clojure.string :as string]))

(def in (-> *in* slurp edn/read-string))

(->> in
     (take-while identity)
     (string/join)
     (edn/read-string)
     (pprint))
#+end_src

*** JRA dev

#+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/jra
cd ~/src/yarmouk && \
    bb start --local carpenter --local workshop
#+end_src

** audio conversion

  #+BEGIN_SRC sh :tangle ~/.zshrc
  #find . -type f -name "*.mkv" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -vn -c:a libmp3lame -y "${FILE%.mkv}.mp3";' _ '{}' \;

  #split file
  function split-audio {
      ffmpeg -i "$1" -f segment -segment_time "$2" -c copy "$1"%03d.mp3
      # ffmpeg -i "$1" -f segment -segment_time 3 -c copy out%03d.mp3
  }

  function convert-mkv-video-to-opus-audio {
      find . -type f -name "*.mkv" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -c:a copy "${FILE%.mkv}.opus";' _ '{}' \;
  }

  function convert-opus-to-aac {
      find . -type f -name "*.webm" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -c:a libfdk_aac -vbr 5 -cutoff 18000 "${FILE%.webm}.m4a";' _ '{}' \;
  }

  function convert-flac-to-alac {
      find . -type f -name "*.flac" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -acodec alac "${FILE%.flac}.m4a";' _ '{}' \;
  }
  function TODO-not-working-raw-to-m4a {
      ffmpeg -f u16le -ar 44100 -ac 1 -i input.raw
  }
  #+END_SRC

** completion

#+BEGIN_SRC sh :tangle ~/.zshrc
_bb_tasks() {
    local matches=(`bb tasks |tail -n +3 |cut -f1 -d ' '`)
    compadd -a matches
    _files # autocomplete filenames as well
}
compdef _bb_tasks bb
#+END_SRC

* AWS

#+begin_src conf :tangle ~/.aws/config :mkdirp yes
[profile jra]
credential_process = sh -c "op get item 'JRA AWS' --fields 'aws_access_key_id,aws_secret_access_key' | 1password-aws"
#+end_src

* next

#+BEGIN_SRC
mkdir -p ~/.config/next
#+END_SRC
:tangle ~/.config/next/init.lisp
  #+BEGIN_SRC lisp
    (in-package :next)
    (define-key *global-map* (key "C-x o") #'function-example)
    ;; (add-to-default-list 'vi-normal-mode 'buffer 'default-modes)

    ;; (define-key :scheme :vi-normal
    ;;   "C-x o" 'example
    ;;   "SPACE" 'scroll-page-down)
  #+END_SRC

* MacOS config

** Use Touch ID for sudo
  /etc/pam.d/sudo

  #+begin_src
    # sudo: auth account password session
    auth       sufficient     pam_tid.so
    auth       sufficient     pam_smartcard.so
    auth       required       pam_opendirectory.so
    account    required       pam_permit.so
    password   required       pam_deny.so
    session    required       pam_permit.so
  #+end_src

* Hosts file

#+BEGIN_SRC conf :tangle ~/src/hosts/myhosts
192.168.1.57 desktop
#+END_SRC

* brew

  #+BEGIN_SRC sh
    brew install \
         pinentry \
         adr-tools \
         makefile2graph \
         pinentry-mac \
         aspell \
         graphviz \
         ffmpeg \
         flac \
         the_silver_searcher \
         awscli \
         pwgen \
         trash \
         nmap \
         node \
         boot-clj \
         clojure \
         rlwrap \
         siege \
         youtube-dl \
         gnupg \
         pass
#+END_SRC

** ffmpeg
   brew install ffmpeg \
   --with-chromaprint \
   --with-fdk-aac \
   --with-fontconfig \
   --with-freetype \
   --with-frei0r \
   --with-game-music-emu \
   --with-libass \
   --with-libbluray \
   --with-libbs2b \
   --with-libcaca \
   --with-libgsm \
   --with-libmodplug \
   --with-libsoxr \
   --with-libssh \
   --with-libvidstab \
   --with-libvorbis \
   --with-libvpx \
   --with-opencore-amr \
   --with-openh264 \
   --with-openjpeg \
   --with-openssl \
   --with-opus \
   --with-rtmpdump \
   --with-rubberband \
   --with-sdl2 \
   --with-snappy \
   --with-speex \
   --with-tesseract \
   --with-theora \
   --with-tools \
   --with-two-lame \
   --with-wavpack \
   --with-webp \
   --with-x265 \
   --with-xz \
   --with-zeromq \
   --with-zimg

* ssh

#+BEGIN_SRC conf :tangle ~/.ssh/config
Host github github.com
User git
Hostname github.com
identityfile ~/.ssh/github-dcostaras.pub
IdentitiesOnly yes
IdentityAgent ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh

Host rsync rsync.net zh1784.rsync.net
User zh1784
identityfile ~/.ssh/rsync.net.pub
IdentitiesOnly yes
IdentityAgent ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh

Host bitbucket bitbucket.org
User git
Hostname bitbucket.org
identityfile ~/.ssh/bitbucket
IdentitiesOnly yes

Host desktop
User dcost
Hostname 192.168.1.57
Identityfile ~/.ssh/desktop
IdentitiesOnly yes

Host proxy
User root
Hostname 134.209.87.117
Identityfile ~/.ssh/donavan
IdentitiesOnly yes

Host media
User media
Hostname 192.168.0.14
IdentityFile ~/.ssh/donavan
IdentitiesOnly yes
ForwardAgent yes

Host * !bitbucket.org !github.com

User donavan

# ForwardAgents no
ServerAliveInterval 60

TCPKeepAlive no

ControlMaster auto
ControlPath ~/.ssh/%r@%h:%p
ControlPersist 4h

ConnectionAttempts 3

Compression yes
Port 22
EscapeChar ^y

AddKeysToAgent yes
UseKeychain yes

#+END_SRC

** public keys

#+begin_src conf :tangle ~/.ssh/github-dcostaras.pub
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNWj37tatbBFb+KIghbp8gtBcOtQbiD1CzIsX6TK16CtYO3A9zeoXqEUbAn2F7dkTVSzmNGIUmCTgrH59T2J4/0= github-dcostaras@secretive.Donavan-Ross’s-MacBook-Air.local
#+end_src

#+begin_src conf :tangle ~/.ssh/rsync.net.pub
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAAmex+/3fzVc6lCOnvlb6E1dIGenfinFKkadPp4dqRc/Ja58V8Y8GOm44hsvQgVlKpkSZ8sLwHHseAVPpQVvuA= rsync@secretive.Donavan-Ross’s-MacBook-Air.local
#+end_src

* authinfo

  :tangle ~/.authinfo.gpg
  #+BEGIN_SRC text
machine imap.gmail.com login d.costaras@gmail.com password
machine smtp.gmail.com login d.costaras@gmail.com password
  #+END_SRC

* isync
:tangle ~/.mbsyncrc
  #+BEGIN_SRC text
Create Both
# Expunge Both
SyncState *
  #+END_SRC
 :tangle ~/.mbsyncrc
  #+BEGIN_SRC text
IMAPAccount personal
Host imap.gmail.com
User d.costaras@gmail.com
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine imap.gmail.com login d.costaras@gmail.com/ {print $NF}'"
SSLType IMAPS
AuthMechs LOGIN

IMAPStore personal-remote
Account personal

MaildirStore personal-local
SubFolders Legacy
Path ~/mail/personal/
Inbox ~/mail/personal/inbox
Trash ~/mail/personal/trash

Channel personal-inbox
Master :personal-remote:"INBOX"
# Patterns "INBOX"
Slave :personal-local:inbox

Channel personal-trash
Master :personal-remote:"[Gmail]/Trash"
Slave :personal-local:trash

# Channel personal-sent
# Master :personal-remote:"[Gmail]/Sent Mail"
# Slave :personal-local:sent

Group personal
Channel personal-inbox
Channel personal-trash
# Channel personal-sent

# Gmail mailboxes:
# "All Mail"
# "Drafts"
# "Important"
# "Sent Mail"
# "Spam"
# "Starred"
# "Trash"
  #+END_SRC
:tangle ~/.mbsyncrc
  #+BEGIN_SRC text
IMAPAccount work
Host imap.gmail.com
User donavan@englishlanguageitutoring.com
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine imap.gmail.com login donavan@englishlanguageitutoring.com/ {print $NF}'"
SSLType IMAPS
AuthMechs LOGIN

IMAPStore work-remote
Account work

MaildirStore work-local
SubFolders Legacy
Path ~/mail/work/
Inbox ~/mail/work/inbox
Trash ~/mail/work/trash

Channel work-inbox
Master :work-remote:"INBOX"
# Patterns "INBOX"
Slave :work-local:inbox

Channel work-trash
Master :work-remote:"[Gmail]/Trash"
Slave :work-local:trash

# Channel work-sent
# Master :work-remote:"[Gmail]/Sent Mail"
# Slave :work-local:sent

Group work
Channel work-inbox
Channel work-trash
# Channel work-sent

# Gmail mailboxes:
# "All Mail"
# "Drafts"
# "Important"
# "Sent Mail"
# "Spam"
# "Starred"
# "Trash"
  #+END_SRC

* servers
** media
:tangle /ssh:media:~/.bash_profile
#+BEGIN_SRC sh
function sync_movies {
    rsync -ahi proxy:/root/Downloads/ ~/to-sort
}
export -f sync_movies
#+END_SRC

** proxy

   #+BEGIN_SRC sh
    # ~/.bashrc: executed by bash(1) for non-login shells.
    # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
    # for examples

    # If not running interactively, don't do anything
    [ -z "$PS1" ] && return

    # don't put duplicate lines in the history. See bash(1) for more options
    # ... or force ignoredups and ignorespace
    HISTCONTROL=ignoredups:ignorespace

    # append to the history file, don't overwrite it
    shopt -s histappend

    # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    HISTSIZE=1000
    HISTFILESIZE=2000

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
            # We have color support; assume it's compliant with Ecma-48
            # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
            # a case would tend to support setf rather than setaf.)
            color_prompt=yes
        else
            color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
        xterm*|rxvt*)
            PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
            ;;
        ,*)
            ;;
    esac

    # enable color support of ls and also add handy aliases
    if [ -x /usr/bin/dircolors ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias ls='ls --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi

    # some more ls aliases
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'

    # Alias definitions.
    # You may want to put all your additions into a separate file like
    # ~/.bash_aliases, instead of adding them here directly.
    # See /usr/share/doc/bash-doc/examples in the bash-doc package.

    if [ -f ~/.bash_aliases ]; then
        . ~/.bash_aliases
    fi

    # enable programmable completion features (you don't need to enable
    # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
    # sources /etc/bash.bashrc).
    #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    #    . /etc/bash_completion
    #fi

    export GOPATH=$HOME/work
    export PATH=$PATH:/usr/lib/go-1.10/bin:$GOPATH/bin

    function torrent {
        $FOO=$(torrengo "the incredible hulk")
    }
   #+END_SRC

*** torrench

    #+BEGIN_SRC conf
     [Torrench-Config]

     ## Torrench - Command-line torrent search program
     ## project by @kryptxy
     ## github: https://github.com/kryptxy/torrench
     ## Configuration file for TPB/KAT/SkyTorrents indexing

     ## *nix users (Linux, MacOS..): Default config directory is $XDG_CONFIG_HOME/torrench/
     ## If not set, fallback to $HOME/.config/torrench/
     ## (Create missing directories)
     ## Windows: Default directory is:
     ## C:\Users\<user>\.config\torrench\

     ## WARNING: Some of the content hosted on these sites is illegal
     ## and downloading those contents can get you into serious troubles.
     ## Use it at your own risk.
     ## Using this is completely optional.
     ## You have been warned.

     TPB_URL = https://thepiratebay.org  https://proxybay.one
     SKY_URL = https://www.skytorrents.in

     ## KAT Proxy is quite shaky, and might not work at all times
     ## I have been unable to find any reliable KAT proxy.
     ## If you know of some working proxy, you can edit KAT_URL with that working proxy
     ## Simply append the proxy (either in the beginning or at the end)
     ## Update me if it works?
     ## Alternatively, use TPB/SkyTorrent. They are pretty reliable and work most of the time.

     KAT_URL = https://kickass.cd/ https://kickass.unblocked.bid/ https://kickass.unlockproj.faith/
     NYAA_URL = https://nyaa.si/
     XBIT_URL = https://xbit.pw/
     RARBG_URL = https://torrentapi.org/pubapi_v2.php?
     1337X_URL = https://1337x.to https://1337x.unblockall.org https://proxyportal.net/1337x-proxy
     IDOPE_URL = https://idope.se
     LIBGEN_URL = http://libgen.io/
     LIMETORRENTS_URL = https://limetorrents.cc https://swaptorrents.com

     ## To enable TPB indexing,
     ## set enable = 1
     enable = 1
    #+END_SRC

* karabiner
:tangle ~/.config/karabiner/assets/complex_modifications/control-delete.json
#+BEGIN_SRC json
{
    "title": "Control delete to backward delete word",
    "rules": [
        {
            "description": "Control delete to backward delete word",
            "manipulators": [
                {
                    "type": "basic",
                    "from": {
                        "key_code": "delete_or_backspace",
                        "modifiers": {
                            "mandatory": [
                                "left_control"
                            ]
                        }
                    },
                    "to": [
                        {
                            "key_code": "delete_or_backspace",
                            "modifiers": [
                                "left_alt"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
#+END_SRC

* TODO Quicklook plugins
Works: --------------------
  # Preview source code files with syntax highlighting (like colored .JS files)
  brew install qlcolorcode

  # Preview Markdown files
  brew install qlstephen

  # Preview JSON files with syntax highlighting
  brew install quicklook-json

  # Preview plaintext files with unknown extensions, like README, CHANGELOG, etc.
  brew install qlstephen

  # Preview the content of .IPA files
  # Installs inside /Applications folder
  brew install suspicious-package

  # Preview iOS/macOS provisioning information for .ipa and .xcarchive
  # For 'mobileprovision' files, Xcode has Quick Look plugin collision:
  # https://github.com/ealeksandrov/ProvisionQL/issues/20
  brew install provisionql

  # Preview the content of macOS apps
  # Installs inside /Applications folder
  brew install apparency

  # Preview WebP images
  brew install webpquicklook

Broken: --------------------
  # Display image size and resolution in windo titlebar of Quick Look
  # Doesn't work due to API change from Apple
  # https://github.com/Nyx0uf/qlImageSize/issues/45#issuecomment-610852166
  #brew install qlimagesize

  # Preview Adobe ASE color swatch files from Photoshop, Illustrator
  # Doesn't work in macOS Catalina
  #brew install quicklookase

  # Preview the content of Android .APK files
  # Doesn't work in macOS Catalina
  #brew install quicklookapk

  https://github.com/spiritphyz/Save-the-Environment/blob/main/User/quicklook-plugins/install-quicklook-plugins.sh
