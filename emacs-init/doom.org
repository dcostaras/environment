#+TITLE: Doom

* config

TODO turn "_" into the vim action to comment with #_ an object
TODO turn "p" into the vim action to comment with #p an object
TODO set C-M-\ to nil to train self to use indentation evil verb "="
TODO org src buffers to be added to workspace
TODO cider switch to last buffer from repl (C-c C-z) should do so across frames
TODO C-h sometimes doesn't work as back level in counsel find file
TODO figure out how to have uncharged time in org clocktables

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Donavan-Ross Costaras"
      user-mail-address "d.costaras@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

(setq doom-font (font-spec :family "Fira Code" :size 14))

(setq
 ;; Line numbers are pretty slow all around. The performance boost of
 ;; disabling them outweighs the utility of always keeping them on.
 display-line-numbers-type nil

 ;; IMO, modern editors have trained a bad habit into us all: a burning
 ;; need for completion all the time -- as we type, as we breathe, as we
 ;; pray to the ancient ones -- but how often do you *really* need that
 ;; information? I say rarely. So opt for manual completion:
 company-idle-delay nil

 ;; lsp-ui-sideline is redundant with eldoc and much more invasive, so
 ;; disable it by default.
 lsp-ui-sideline-enable nil
 lsp-enable-symbol-highlighting nil

 ;; More common use-case
 evil-ex-substitute-global t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;;

;; macOS
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)

;; Org
(after! org
  (setq org-src-window-setup 'current-window))

;; (setq org-directory "~/org")
;; (setq org-agenda-files (list "~/org/inbox.org"))
;; (setq org-capture-templates
;;       `(("i" "Inbox" entry  (file "inbox.org")
;;          ,(concat "* TODO %?\n"
;;                   "/Entered on/ %U"))))
;; (map! "C-c c" 'org-capture)
;; (defun org-capture-inbox ()
;;   (interactive)
;;   (call-interactively 'org-store-link)
;;   (org-capture nil "i"))

;; (map! "C-c i" 'org-capture-inbox)

;; (map! "C-c a" 'org-agenda)
;; (setq org-agenda-hide-tags-regexp ".")
;; (setq org-agenda-prefix-format
;;       '((agenda . " %i %-12:c%?-12t% s")
;;         (todo   . " ")
;;         (tags   . " %i %-12:c")
;;         (search . " %i %-12:c")))

(use-package! auto-dim-other-buffers
  :config
  (auto-dim-other-buffers-mode t))

;; Spelling
(setq ispell-dictionary "en"
      ispell-personal-dictionary "~/env/spelling/.pws")

;; Evil
(setq evil-escape-unordered-key-sequence t)

;; Hydra paste
(defhydra hydra-paste
  (:color red
   :hint nil)
  "\n[%s(length kill-ring-yank-pointer)/%s(length kill-ring)] \
 [_C-j_/_C-k_] cycles through yanked text, [_p_/_P_] pastes the same text \
 above or below. Anything else exits."
  ("C-j" evil-paste-pop)
  ("C-k" evil-paste-pop-next)
  ("p" evil-paste-after)
  ("P" evil-paste-before))

(map! :nv "p" #'hydra-paste/evil-paste-after
      :nv "P" #'hydra-paste/evil-paste-before)

;; Ivy
(after! ivy
  (map! "C-h"
        :map ivy-minibuffer-map
        'counsel-up-directory)

  (defun ivy-yank-action (x)
    (kill-new x))

  (defun ivy-copy-to-buffer-action (x)
    (with-ivy-window
      (insert x)))

  ;; Ivy actions only working when called from C-M-o (ivy-dispatching-call)
  (ivy-set-actions
   t
   '(("i" ivy-copy-to-buffer-action "insert")
     ("y" ivy-yank-action "yank"))))

(setq ivy-extra-directories '())

;; Emacs lisp
(use-package! aggressive-indent
  :config (add-hook! emacs-lisp-mode
            (aggressive-indent-mode 1)))

;; LSP
(after! lsp-mode
  (push "\\.shadow-cljs" lsp-file-watch-ignored)
  (push "\\.clj-kondo" lsp-file-watch-ignored)
  (push "\\.lsp" lsp-file-watch-ignored)
  (push "\\.cpcache" lsp-file-watch-ignored)
  (push "resources" lsp-file-watch-ignored)
  )

;; Lisps
(after! clojure
  (put-clojure-indent 'context 2)
  (put-clojure-indent 'POST 2)
  (put-clojure-indent 'GET 2)
  (put-clojure-indent 'PUT 2)

  (after! aggressive-indent
    (add-hook! clojure-mode
      (aggressive-indent-mode 1))))

;; Clojure
(after! (:and clojure-mode cider)

  (defun my-cider-wandi-reset ()
    (interactive)
    (projectile-save-project-buffers)
    (cider-interactive-eval "(user/reset-app)"))
  (map! "C-c C-i" #'my-cider-wandi-reset)

  (defun my-cider-load-debug-tools ()
    (interactive)
    (cider-interactive-eval
     "(require '[com.gfredericks.debug-repl :refer [break! unbreak! unbreak!!]])
      (require '[hashp.core])"))

  (setq cider-clojure-cli-global-options "-A:debug-tools")
  (setq cider-shadow-cljs-global-options "-A:debug-tools")
  (add-to-list 'cider-repl-init-code "(require,'hashp.core)")
  (add-to-list 'cider-jack-in-nrepl-middlewares "com.gfredericks.debug-repl/wrap-debug-repl")

  (setq cider-auto-select-test-report-buffer nil)
  (setq cider-save-file-on-load t))

;; Lispyville
(lispyville-set-key-theme
 '(operators
   c-w
   (prettify insert)
   paredit))

(use-package! evil-lispy
  :config (add-hook! '(clojure-mode clojurec-mode clojurescript-mode) #'evil-lispy-mode))

(defun my-insert-hash-print (arg)
  (interactive "p")
  (if (lispy-left-p)
      (insert "#p ")
    (self-insert-command arg)))

(map! :map lispy-mode-map-special :i "p" #'my-insert-hash-print)

;; Evil escape
(use-package! evil-escape
  :init (setq evil-escape-key-sequence "jk"))

;; Dired
(defun my-buffer-mode (&optional buffer-or-name)
  "Returns the major mode associated with a buffer.
If buffer-or-name is nil return current buffer's mode."
  (interactive)
  (buffer-local-value
   'major-mode
   (if buffer-or-name
       (get-buffer buffer-or-name)
     (current-buffer))))

(defun my-buffer-path ()
  (file-name-directory (or  (buffer-file-name) default-directory)))

(defun eshell-cwd ()
  "Sets the eshell directory to the current buffer

  Usage: M-x eshell-cwd"
  (interactive)
  (let ((path (my-buffer-path)))
    (print path)
    (switch-to-buffer "*eshell*")
    (cd path)
    (eshell-emit-prompt)))

(defun dired-cwd ()
  (interactive)
  (let ((path (file-name-directory (or  (buffer-file-name) default-directory))))
    (dired path)))

(defun dired-or-eshell ()
  (interactive)
  (let ((mode (my-buffer-mode)))
    (cond
     ((eq 'eshell-mode mode) (dired-cwd))
     ((eq 'dired-mode mode) (eshell-cwd))
     (t (eshell-cwd)))))

(map! :n "-" #'dired-or-eshell
      :map dired-mode-map :n "-" #'dired-or-eshell)

;; End
;;(toggle-frame-fullscreen)
#+end_src

#+RESULTS:

* init

#+begin_src emacs-lisp :tangle ~/.doom.d/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +aspell +everywhere)             ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       magit               ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       prodigy             ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       (clojure +lsp)      ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pomodoro)     ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +css)               ; the tubes
       ;;yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* packages

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

(package! aggressive-indent)
(package! auto-dim-other-buffers)
(package! evil-lispy)
#+end_src

* services

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(prodigy-define-service
  :name "fulcro template"
  :command "npx"
  :args '("shadow-cljs" "-A:cider-nrepl:debug-tools" "server")
  :cwd "~/src/fulcro-template"
  :tags '(work)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "shadow-cljs - nREPL server started on port 9000" output)
                   (prodigy-set-status service 'ready)))))
#+end_src
