#+TITLE: Doom

* TODO turn "_" into the vim action to comment with #_ an object
* TODO turn "p" into the vim action to comment with #p an object
* TODO set C-M-\ to nil to train self to use indentation evil verb "="
* TODO org src buffers to be added to workspace
* TODO cider switch to last buffer from repl (C-c C-z) should do so across frames
* TODO C-h sometimes doesn't work as back level in counsel find file
* TODO figure out how to have uncharged time in org clocktables
* TODO clj-kondo/clojure-lsp can't find reference if it's used a default destructuring arg

currency-format is in the :or map of the next function
#+begin_src clojure
(defn currency-format [value]
  (ft/format-number value {:currency? true
                           :round-to  0
                           :dash?     false}))

(defn unroll-row [content key & {:keys [format-fn classes style]
                                 :or   {format-fn currency-format
                                        classes   []
                                        style     {}}}]
  (map
   (fn [x] (dom/td {:classes classes :style style}
                   (format-fn (key x))))
   content))
#+end_src

* TODO clj-kondo/clojure-lsp clean-ns doesn't see aliases used in keywords as usage and removes the entries
* TODO clj-kondo/clojure-lsp can't autocomplete locals
* TODO auto complete refers in ns forms
* TODO auto complete should support symbols in refer blocks
* TODO eval last/current sexp text object
so one can yank eval last sexp

* config
** Settings
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
;;; -*- lexical-binding: t; -*-
(setq lexical-binding t)

(setq

 ;; Place your private configuration here! Remember, you do not need to run 'doom
 ;; sync' after modifying this file!

 ;; Some functionality uses this to identify you, e.g. GPG configuration, email
 ;; clients, file templates and snippets.
 user-full-name "Donavan-Ross Costaras"
 user-mail-address "d.costaras@gmail.com"

 ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
 ;; are the three important ones:
 ;;
 ;; + `doom-font'
 ;; + `doom-variable-pitch-font'
 ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
 ;;   presentations or streaming.
 ;;
 ;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
 ;; font string. You generally only need these two:
 ;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
 ;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

 ;; There are two ways to load a theme. Both assume the theme is installed and
 ;; available. You can either set `doom-theme' or manually load a theme with the
 ;; `load-theme' function. This is the default:
 doom-theme 'doom-one
 ;; If you use `org' and don't want your org files in the default location below,
 ;; change `org-directory'. It must be set before org loads!
 org-directory "~/org/"
 doom-font (font-spec :family "Fira Code" :size 14)
 display-line-numbers-type 'relative

 ;; IMO, modern editors have trained a bad habit into us all: a burning
 ;; need for completion all the time -- as we type, as we breathe, as we
 ;; pray to the ancient ones -- but how often do you *really* need that
 ;; information? I say rarely. So opt for manual completion:
 company-idle-delay nil

 ;; lsp-ui-sideline is redundant with eldoc and much more invasive, so
 ;; disable it by default.
 lsp-ui-sideline-enable nil
 lsp-enable-symbol-highlighting nil

 ;; More common use-case
 evil-ex-substitute-global t)

;; More modern fill column length
(setq-default fill-column 100)

(setq ns-use-native-fullscreen nil)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;;
#+end_src

** MacOS

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)
#+end_src

** Org

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! org
  (setq org-src-window-setup 'current-window)
  ;; (setq org-time-clocksum-use-effort-durations t)
  (setq org-time-clocksum-use-effort-durations nil)
  (setq org-duration-format '(
                              ;; ("d" . nil)
                              ("h" . nil)
                              (special . 2)
                              ;; ("min" . t)
                              ))

  (setq org-effort-durations
        `(
          ;; ("min" . 1)
          ("h" . 60)
          ;; eight-hour days
          ;; ("d" . ,(* 60 8))
          ;; five-day work week
          ;; ("w" . ,(* 60 8 5))
          ;; four weeks in a month
          ;; ("m" . ,(* 60 8 5 4))
          ;; work a total of 12 months a year --
          ;; this is independent of holiday and sick time taken
          ;; ("y" . ,(* 60 8 5 4 12))
          ))
  (setq org-startup-folded t)
  (use-package! worf)
  (use-package! ob-http)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (http . t)))

  (defun bjm/worf-insert-internal-link ()
    "Use ivy to insert a link to a heading in the current `org-mode' document. Code is based on `worf-goto'."
    (interactive)
    (let ((cands (worf--goto-candidates)))
      (ivy-read "Heading: " cands
                :action 'bjm/worf-insert-internal-link-action)))

  (defun bjm/worf-insert-internal-link-action (x)
    "Insert link for `bjm/worf-insert-internal-link'"
    ;; go to heading
    (save-excursion
      (goto-char (cdr x))
      ;; store link
      (call-interactively 'org-store-link))
    ;; return to original point and insert link
    (org-insert-last-stored-link 1)
    ;; org-insert-last-stored-link adds a newline so delete this
    (delete-backward-char 1))


  (map! :map org-src-mode-map
        "C-c C-c" nil
        "C-c '" #'org-edit-src-exit)


;; (setq org-directory "~/org")
;; (setq org-agenda-files (list "~/org/inbox.org"))
;; (setq org-capture-templates
;;       `(("i" "Inbox" entry  (file "inbox.org")
;;          ,(concat "* TODO %?\n"
;;                   "/Entered on/ %U"))))
;; (map! "C-c c" 'org-capture)
;; (defun org-capture-inbox ()
;;   (interactive)
;;   (call-interactively 'org-store-link)
;;   (org-capture nil "i"))

;; (map! "C-c i" 'org-capture-inbox)

;; (map! "C-c a" 'org-agenda)
;; (setq org-agenda-hide-tags-regexp ".")
;; (setq org-agenda-prefix-format
;;       '((agenda . " %i %-12:c%?-12t% s")
;;         (todo   . " ")
;;         (tags   . " %i %-12:c")
;;         (search . " %i %-12:c")))
  )
#+end_src

** Auto dim other buffers

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! auto-dim-other-buffers
  :config
  (auto-dim-other-buffers-mode t))
#+end_src

** Spelling

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq ispell-dictionary "en"
      ispell-personal-dictionary "~/env/spelling/.pws")
#+end_src

** Evil

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq evil-escape-unordered-key-sequence t)
#+end_src

*** Hydra paste

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(defhydra hydra-paste
  (:color red
   :hint nil)
  "\n[%s(length kill-ring-yank-pointer)/%s(length kill-ring)] \
 [_C-j_/_C-k_] cycles through yanked text, [_p_/_P_] pastes the same text \
 above or below. Anything else exits."
  ("C-j" evil-paste-pop)
  ("C-k" evil-paste-pop-next)
  ("p" evil-paste-after)
  ("P" evil-paste-before))

(map! :nv "p" #'hydra-paste/evil-paste-after
      :nv "P" #'hydra-paste/evil-paste-before)

#+end_src

*** Evil escape

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! evil-escape
  :init (setq evil-escape-key-sequence "jk"))
#+end_src

*** Motion trainer
#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
;; (global-evil-motion-trainer-mode 1)
(setq evil-motion-trainer-threshold 6)
#+end_src

** Ivy

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! ivy

  (setq ivy-extra-directories '())

  (map! "C-h" :map ivy-minibuffer-map #'counsel-up-directory)
  (map! :n "/" #'+default/search-buffer)

  (defun ivy-yank-action (x)
    (kill-new x))

  (defun ivy-copy-to-buffer-action (x)
    (with-ivy-window
      (insert x)))

  ;; Ivy actions only working when called from C-M-o (ivy-dispatching-call)
  (ivy-set-actions
   t
   '(("i" ivy-copy-to-buffer-action "insert")
     ("y" ivy-yank-action "yank"))))
#+end_src

** Aggressive indent

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(use-package! aggressive-indent
  :config (add-hook! emacs-lisp-mode
            (aggressive-indent-mode 1)))
#+end_src

** Magit

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(setq auth-sources '("~/.authinfo"))
#+end_src

** LSP

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! lsp-mode
  (push "\\.shadow-cljs" lsp-file-watch-ignored)
  (push "\\.clj-kondo" lsp-file-watch-ignored)
  (push "\\.lsp" lsp-file-watch-ignored)
  (push "\\.cpcache" lsp-file-watch-ignored)
  (push "resources" lsp-file-watch-ignored)

  (setq lsp-ui-peek-always-show t)
  (setq lsp-ui-sideline-show-hover t))
#+end_src

** Scheme/Racket

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! racket
  (map! :map racket-mode-map "C-c C-c" #'racket-send-definition))

(defun mit-scheme ()
  (interactive)
  (run-scheme "/Applications/scheme.app/Contents/Resources/mit-scheme"))
#+end_src

** Clojure

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(after! clojure

  (after! aggressive-indent
    (add-hook! clojure-mode
      (aggressive-indent-mode 1)))

  ;; TODO test this
  ;; see https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/
  ;; (use-package! cider
  ;;   :config
  ;;   (set-lookup-handlers! 'cider-mode nil))
  ;;
  (after! lsp-mode
    (after! lsp-ui-mode
      (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
      (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))))


;; Clojure
(after! (:and clojure-mode cider)

  ;; Not used
  ;; (defconst my-clojure-def-and-name-regex
  ;;   (rx
  ;;    (seq bol
  ;;         (* blank) "(" (* blank)
  ;;         (group
  ;;          (or
  ;;           "specification"
  ;;           (and "def" (* (syntax word))))))))



  (defun my-cider-wandi-reset ()
    (interactive)
    (projectile-save-project-buffers)
    (cider-interactive-eval "(user/restart)"))
  (map! "C-c C-i" #'my-cider-wandi-reset)

  (defun my-cider-load-debug-tools ()
    (interactive)
    (cider-interactive-eval
     "(require '[com.gfredericks.debug-repl :refer [break! unbreak! unbreak!!]])
      (require '[hashp.core])"))

  (setq cider-clojure-cli-global-options "-A:debug-tools")
  (setq cider-shadow-cljs-global-options "-A:debug-tools")
  (add-to-list 'cider-repl-init-code "(require,'hashp.core)")
  (add-to-list 'cider-jack-in-nrepl-middlewares "com.gfredericks.debug-repl/wrap-debug-repl")

  (setq cider-auto-select-test-report-buffer nil)
  (setq cider-save-file-on-load t)
  (setq clojure-toplevel-inside-comment-form t)
  (setq org-babel-clojure-backend 'cider)
  (setq lsp-lens-enable t)

  ;; TODO test this
  ;; see https://emacs-lsp.github.io/lsp-mode/tutorials/clojure-guide/
  ;; (use-package! clj-refactor
  ;;   :after clojure-mode
  ;;   :config
  ;;   (set-lookup-handlers! 'clj-refactor-mode nil))

  (define-clojure-indent
    ;; Fulcro
    (>defn :defn)
    (defmutation [1 :form :form [1]])
    ;; (pc/defmutation [2 :form :form [1]])

    ;; Fulcro-spec
    (specification [1])
    (component [1])
    (behavior [1])
    (when-mocking '(0))
    (assertions [0])

    (thrown-with-data? [1])
    (not-thrown-with-data? [1])

    ;; JRA
    (system/let [1])
    (clet [1])

    (swap!-> [1])

    ;; compojure
    (context 2)
    (POST 2)
    (GET 2)
    (PUT 2))

  (setq cider-test-defining-forms '("deftest" "defspec" "specification"))

  (defun tdd-test ()
    "Thin wrapper around `cider-test-run-tests'."
    (when (cider-connected-p)
      (let ((cider-auto-select-test-report-buffer nil)
            (cider-test-show-report-on-success nil))
        (cider-test-run-ns-tests nil 'soft))))

  (defun kaocha-runner--run-tests (testable-sym &optional run-all? background? original-buffer)
    "Run kaocha tests.

If RUN-ALL? is t, all tests are run, otherwise attempt a run with the provided
TESTABLEY-SYM. In practice TESTABLEY-SYM can be a test id, an ns or an ns/test-fn.

If BACKGROUND? is t, we don't message when the tests start running.

Given an ORIGINAL-BUFFER, use that instead of (current-buffer) when switching back."
    (interactive)
    (kaocha-runner--clear-buffer kaocha-runner--out-buffer)
    (kaocha-runner--clear-buffer kaocha-runner--err-buffer)
    (kaocha-runner--eval-clojure-code
     (format kaocha-runner-repl-invocation-template
             (if run-all?
                 (format "(kaocha.repl/run-all %s)" kaocha-runner-extra-configuration)
               (format
                "(kaocha.repl/run %s %s)"
                testable-sym
                kaocha-runner-extra-configuration)))
     (let ((original-buffer (or original-buffer (current-buffer)))
           (done? nil)
           (any-errors? nil)
           (shown-details? nil)
           (the-value nil)
           (start-time (float-time)))
       (unless background?
         (if run-all?
             (message "Running all tests ...")
           (message "[%s] Running tests ..." testable-sym)))
       (lambda (response)
         (nrepl-dbind-response response (value out err status)
           (when out
             (kaocha-runner--insert kaocha-runner--out-buffer out)
             (when (let ((case-fold-search nil))
                     (string-match-p kaocha-runner--fail-re out))
               (setq any-errors? t))
             (when (and (< kaocha-runner-long-running-seconds
                           (- (float-time) start-time))
                        (not shown-details?))
               (setq shown-details? t)
               (kaocha-runner--show-details-window original-buffer kaocha-runner-ongoing-tests-win-min-height)))
           (when err
             (kaocha-runner--insert kaocha-runner--err-buffer err))
           (when value
             (setq the-value value))
           (when (and status (member "done" status))
             (setq done? t))
           (when done?
             (if the-value
                 (kaocha-runner--show-report the-value (unless run-all? testable-sym))
               (unless (get-buffer-window kaocha-runner--err-buffer 'visible)
                 (message "Kaocha run failed. See error window for details.")
                 (switch-to-buffer-other-window kaocha-runner--err-buffer))))
           (when done?
             (if any-errors?
                 (kaocha-runner--show-details-window original-buffer kaocha-runner-failure-win-min-height)
               ;; (kaocha-runner--hide-window kaocha-runner--out-buffer)
               )))))))

  (defun kaocha-runner--show-details-window (original-buffer min-height)
    "Show details from the test run with a MIN-HEIGHT, but switch back to ORIGINAL-BUFFER afterwards."
    (save-excursion
      (kaocha-runner--with-window kaocha-runner--out-buffer original-buffer
        ;; (visual-line-mode 1)
        ;; (goto-char (point-min))
        ;; (let ((case-fold-search nil))
        ;;   (re-search-forward kaocha-runner--fail-re nil t))
        ;; (end-of-line)

        ;; (goto-char (point-max))
        ;; (other-frame 1)
        ;; (goto-char (point-max))
        )))

  (defvar my-test-runner 'kaocha)

  (defun my-execute-test (ns test-var code-buffer)
    (cond ((eq my-test-runner 'kaocha)
           (kaocha-runner--run-tests
            (kaocha-runner--testable-sym ns test-var (eq major-mode 'clojurescript-mode))
            nil
            t
            code-buffer))
          ((eq my-test-runner 'cider)
           (progn
             (cider-test-update-last-test ns (list test-var))
             (cider-test-execute ns (list test-var))))))

  (defvar my-last-executed-test nil)

  (defun my-run-test ()
    "Run Clojure test at point.

Supports the fulcro-spec `specification' macro"
    (interactive)
    (let* ((ns  (clojure-find-ns))
           (code-buffer (current-buffer)))
      (when ns
        (cider-interactive-eval
         (concat "(clojure.core/let [{:keys [name test]} (clojure.core/meta "
                 (cider-defun-at-point)
                 ")] (clojure.core/when test name))")
         (nrepl-make-response-handler
          code-buffer
          (lambda (_buffer test-var)
            (if (not (string= "nil" test-var))
                (progn
                  (setq my-last-executed-test (list ns test-var))
                  (my-execute-test ns test-var code-buffer))
              (when my-last-executed-test
                (my-execute-test
                 (car my-last-executed-test)
                 (cadr my-last-executed-test)
                 code-buffer))))
          nil
          nil
          (lambda (_buffer)))))))

  (define-minor-mode tdd-mode
    "Run all tests whenever a file is loaded."
    nil nil nil
    :global t
    (if tdd-mode
        (progn
          (advice-add 'cider-eval-defun-at-point :after #'my-run-test)
          (add-hook 'cider-file-loaded-hook #'tdd-test))
      (progn
        (advice-remove 'cider-eval-defun-at-point #'my-run-test)
        (remove-hook 'cider-file-loaded-hook #'tdd-test))))

  (define-minor-mode pprint-eval-mode
    "When active swaps `cider-eval-defun-at-point' with `cider-pprint-eval-defun-at-point'"
    nil nil nil
    :global t
    (if pprint-eval-mode
        (map! :mode (clojure-mode clojurec-mode clojurescript-mode)
              [remap cider-eval-defun-at-point] #'cider-pprint-eval-defun-at-point
              [remap cider-eval-last-sexp] #'cider-pprint-eval-last-sexp)
      (map! :mode (clojure-mode clojurec-mode clojurescript-mode)
            [remap cider-pprint-eval-defun-at-point] #'cider-eval-defun-at-point
            [remap cider-pprint-eval-last-sexp] #'cider-eval-last-sexp)))

  (advice-add 'cider-pprint-eval-last-sexp :around 'evil-collection-cider-last-sexp)

  (use-package kaocha-runner
    :init
    (bind-keys :prefix-map ar-emacs-kaocha-prefix-map
               :prefix "C-c k"
               ("t" . kaocha-runner-run-test-at-point)
               ("r" . kaocha-runner-run-tests)
               ("a" . kaocha-runner-run-all-tests)
               ("w" . kaocha-runner-show-warnings)
               ("h" . kaocha-runner-hide-windows)))

  (defun jet ()
    (interactive)
    (shell-command-on-region
     (region-beginning)
     (region-end)
     "jet --pretty --edn-reader-opts '{:default tagged-literal}'"
     (current-buffer)
     t
     "*jet error buffer*"
     t))

  ;; waffletower  6:03 AM
  ;; I came up with a working PoC for injections using NREPL.  Is there a more straight-forward way to accomplish this?
  ;; Untitled
  ;; (ns repl-eval.nrepl
  ;;     (:require [clojure.pprint :refer [pprint]]
  ;;      [nrepl.server :as server]
  ;;      [nrepl.core :as nrepl]
  ;;      refactor-nrepl.middleware
  ;;      cider.nrepl))
  ;; ​
  ;; (defn start
  ;;   []
  ;;   (let [server (server/start-server
  ;;                 :handler (apply server/default-handler
  ;;                                 (conj
  ;;                                  (map #'cider.nrepl/resolve-or-fail cider.nrepl/cider-middleware)
  ;;                                  #'refactor-nrepl.middleware/wrap-refactor)))
  ;;                port (:port server)]
  ;;     (with-open [cxn (nrepl/connect :port port)]
  ;;                (-> (nrepl/client cxn 1000)
  ;;                    (nrepl/message {:op "eval" :code "(require '[clojure.pprint :refer [pprint]])"})
  ;;                    nrepl/response-values))
  ;;     (spit ".nrepl-port" port)))
  ;; Collapse
  ;; 6:04
  ;; The injection in this case is requiring pprint.
  ;; waffletower  6:09 AM
  ;; The code is easily referenced in a deps.edn alias:
  ;; :inject {:extra-deps {waffletower/repl-eval {:local/root "../repl-eval/"}
  ;; nrepl/nrepl {:mvn/version "0.7.0"}
  ;; refactor-nrepl/refactor-nrepl {:mvn/version "2.5.0"}
  ;; cider/cider-nrepl {:mvn/version "0.25.1"}}
  ;; :main-opts ["-m" "repl-eval.nrepl"]}
  ;; While I could refactor this to instrument variable middleware and injection forms, is there some hook I am missing here?  It was much much easier and cleaner to accomplish REPL initialization with leiningen.

  )

#+end_src

** Lispy

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(lispyville-set-key-theme
 '(operators
   c-w
   (prettify insert)
   paredit))

(use-package! evil-lispy
  :config (add-hook! '(clojure-mode clojurec-mode clojurescript-mode) #'evil-lispy-mode))

(defun my-insert-hash-print (arg)
  (interactive "p")
  (if (lispy-left-p)
      (insert "#p ")
    (self-insert-command arg)))

(map! :map lispy-mode-map-special :i "p" #'my-insert-hash-print)
#+end_src

** Dired/Eshell

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(defun my-buffer-mode (&optional buffer-or-name)
  "Return the major mode associated with a buffer.
If buffer-or-name is nil return current buffer's mode."
  (interactive)
  (buffer-local-value
   'major-mode
   (if buffer-or-name
       (get-buffer buffer-or-name)
     (current-buffer))))

(defun my-buffer-path ()
  (file-name-directory (or  (buffer-file-name) default-directory)))

(defun eshell-cwd ()
  "Set the eshell directory to the current buffer.

  Usage: M-x eshell-cwd"
  (interactive)
  (let ((path (my-buffer-path)))
    (print path)
    (switch-to-buffer "*eshell*")
    (cd path)
    (eshell-emit-prompt)))

(defun dired-cwd ()
  (interactive)
  (let ((path (file-name-directory (or  (buffer-file-name) default-directory))))
    (dired path)))

(defun dired-or-eshell ()
  (interactive)
  (let ((mode (my-buffer-mode)))
    (cond
     ((eq 'eshell-mode mode) (dired-cwd))
     ((eq 'dired-mode mode) (eshell-cwd))
     (t (eshell-cwd)))))

(map! :n "-" #'dired-or-eshell
      :map dired-mode-map :n "-" #'dired-or-eshell)
#+end_src

* Lispy bindings
#+NAME: lispy-bindings
| key | function                      | column   |
|-----+-------------------------------+----------|
| <   | lispy-barf                    |          |
| A   | lispy-beginning-of-defun      |          |
| j   | lispy-down                    |          |
| Z   | lispy-edebug-stop             |          |
| B   | lispy-ediff-regions           |          |
| G   | lispy-goto-local              |          |
| h   | lispy-left                    |          |
| N   | lispy-narrow                  |          |
| y   | lispy-occur                   |          |
| o   | lispy-other-mode              |          |
| J   | lispy-outline-next            |          |
| K   | lispy-outline-prev            |          |
| P   | lispy-paste                   |          |
| l   | lispy-right                   |          |
| I   | lispy-shifttab                |          |
| >   | lispy-slurp                   |          |
| SPC | lispy-space                   |          |
| xB  | lispy-store-region-and-buffer |          |
| u   | lispy-undo                    |          |
| k   | lispy-up                      |          |
| v   | lispy-view                    |          |
| V   | lispy-visit                   |          |
| W   | lispy-widen                   |          |
| D   | pop-tag-mark                  |          |
| x   | see                           |          |
| L   | unbound                       |          |
| U   | unbound                       |          |
| X   | unbound                       |          |
| Y   | unbound                       |          |
| H   | lispy-ace-symbol-replace      | Edit     |
| c   | lispy-clone                   | Edit     |
| C   | lispy-convolute               | Edit     |
| n   | lispy-new-copy                | Edit     |
| O   | lispy-oneline                 | Edit     |
| r   | lispy-raise                   | Edit     |
| R   | lispy-raise-some              | Edit     |
| \   | lispy-splice                  | Edit     |
| S   | lispy-stringify               | Edit     |
| i   | lispy-tab                     | Edit     |
| xj  | lispy-debug-step-in           | Eval     |
| xe  | lispy-edebug                  | Eval     |
| xT  | lispy-ert                     | Eval     |
| e   | lispy-eval                    | Eval     |
| E   | lispy-eval-and-insert         | Eval     |
| xr  | lispy-eval-and-replace        | Eval     |
| p   | lispy-eval-other-window       | Eval     |
| q   | lispy-ace-paren               | Move     |
| z   | lispy-knight                  | Move     |
| s   | lispy-move-down               | Move     |
| w   | lispy-move-up                 | Move     |
| t   | lispy-teleport                | Move     |
| Q   | lispy-ace-char                | Nav      |
| -   | lispy-ace-subword             | Nav      |
| a   | lispy-ace-symbol              | Nav      |
| b   | lispy-back                    | Nav      |
| d   | lispy-different               | Nav      |
| f   | lispy-flow                    | Nav      |
| F   | lispy-follow                  | Nav      |
| g   | lispy-goto                    | Nav      |
| xb  | lispy-bind-variable           | Refactor |
| xf  | lispy-flatten                 | Refactor |
| xc  | lispy-to-cond                 | Refactor |
| xd  | lispy-to-defun                | Refactor |
| xi  | lispy-to-ifs                  | Refactor |
| xl  | lispy-to-lambda               | Refactor |
| xu  | lispy-unbind-variable         | Refactor |
| M   | lispy-multiline               | Other    |
| xh  | lispy-describe                | Other    |
| m   | lispy-mark-list               | Other    |

 #+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el :var bindings=lispy-bindings :colnames yes=
(eval
 (append
  '(defhydra my/lispy-cheat-sheet (:hint nil :foreign-keys run)
     ("<f12>" nil :exit t))
  (cl-loop for x in bindings
           unless (string= "" (elt x 2))
           collect
           (list (car x)
                 (intern (elt x 1))
                 (when (string-match "lispy-\\(?:eval-\\)?\\(.+\\)"
                                     (elt x 1))
                   (match-string 1 (elt x 1)))
                 :column
                 (elt x 2)))))
(with-eval-after-load "lispy"
  (define-key lispy-mode-map (kbd "<f12>") 'my/lispy-cheat-sheet/body))
   #+END_SRC

* init

#+begin_src emacs-lisp :tangle ~/.doom.d/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company            ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy                ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                   ; what makes DOOM look the way it does
       doom-dashboard         ; a nifty splash screen for Emacs
       doom-quit              ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       fill-column       ; a `fill-column' indicator
       hl-todo                ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline    ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints                    ; highlight the region an operation acts on
       (popup +defaults)          ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter        ; vcs diff in the fringe
       vi-tilde-fringe  ; fringe tildes to mark beyond EOB
       window-select    ; TODO check +numbers visually switch windows
       workspaces       ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere)             ; come to the dark side, we have cookies
       file-templates                 ; auto-snippets for empty files
       fold                           ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets                       ; my elves. They type so I don't have to
       word-wrap                      ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm                            ; the best terminal emulation in Emacs

       :checkers
       syntax                        ; tasing you for every semicolon you forget
       (spell +aspell +everywhere)   ; tasing you for misspelling mispelling
       grammar                       ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)       ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup                         ; navigate your code and its documentation
       lsp
       (magit +forge)      ; a git porcelain for Emacs
       make       ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       prodigy    ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)               ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       (clojure +lsp)                   ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp                       ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown         ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pomodoro +dragndrop +pandoc)  ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket              ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh     ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +css)                       ; the tubes
       yaml                ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* packages

#+begin_src emacs-lisp :tangle ~/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
                                        ;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
                                        ;(package! another-package
                                        ;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
                                        ;(package! this-package
                                        ;  :recipe (:host github :repo "username/repo"
                                        ;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
                                        ;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
                                        ;(package! builtin-package :recipe (:nonrecursive t))
                                        ;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
                                        ;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
                                        ;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
                                        ;(unpin! pinned-package)
;; ...or multiple packages
                                        ;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
                                        ;(unpin! t)

(package! aggressive-indent)
(package! auto-dim-other-buffers)
(package! evil-lispy)
(package! worf)
(package! ob-http)
(package! org-download)
(package! writeroom-mode)
;; (package! pcre2el)
(package! kaocha-runner)
(package! evil-motion-trainer
  :recipe (:host github :repo "martinbaillie/evil-motion-trainer"))

(unpin! lsp-mode)
#+end_src

* services

#+begin_src emacs-lisp :tangle ~/.doom.d/config.el
(prodigy-define-service
  :name "fulcro template"
  :command "npx"
  :args '("shadow-cljs" "-A:cider-nrepl:debug-tools" "server")
  :cwd "~/src/fulcro-template"
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "shadow-cljs - nREPL server started on port 9000" output)
                   (prodigy-set-status service 'ready)))))

(prodigy-define-service
  :name "RAD demo"
  :command "npx"
  :args '("shadow-cljs" "-A:cider-nrepl:debug-tools" "server")
  :cwd "~/src/rad-demo/"
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "shadow-cljs - nREPL server started on port 9000" output)
                   (prodigy-set-status service 'ready)))))

(prodigy-define-service
  :name "JRA frontend"
  :command "npx"
  :args '("shadow-cljs" "-A:cider-nrepl:debug-tools" "server")
  :cwd "~/src/jra"
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :on-output (lambda (&rest args)
               (let ((output (plist-get args :output))
                     (service (plist-get args :service)))
                 (when (s-matches? "shadow-cljs - nREPL server started on port 9000" output)
                   (prodigy-set-status service 'ready)))))

(prodigy-define-service
  :name "JRA SOCKS proxy"
  :command "datomic"
  :command "printenv"
  :args '("client" "access" "jra-storage" "-p" "jra")
  ;; :args '("$AWS_ACCESS_KEY_ID")
  :cwd "~/src/jra/bin"
  ;; :env '(("LANG" "en_US.UTF-8")
  ;;        ("LC_ALL" "en_US.UTF-8"))
  :tags '(work fulcro)
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t)
#+end_src

* .dir-locals

#+begin_src emacs-lisp :tangle ~/src/jra/.dir-locals-2.el
((nil . ((cider-clojure-cli-global-options . "-A:dev:test:kondo:debug-tools -J-Dtrace -J-Dghostwheel.enabled=true")
         (cider-custom-cljs-repl-init-form . "(shadow/repl :main)")
         (cider-default-cljs-repl . shadow-select)
         (cider-known-endpoints . (("host-a" "10.10.10.1" "7888")
                                   ("localhost" "9000"))))))
#+end_src
