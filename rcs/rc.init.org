#+author: Donavan-Ross Costaras
#+email: d.costaras@gmail.com

* Clojure environemnt
** Inject CIDER dependencies and middleware boot task

#+BEGIN_SRC clojure :tangle ~/.boot/profile.boot :ns 'nil
  (require 'boot.repl)

  (swap! boot.repl/*default-dependencies*
	 concat '[[cider/cider-nrepl "0.21.0"]
		  [nrepl "0.6.0"]
		  [refactor-nrepl "2.4.0"]])

  (swap! boot.repl/*default-middleware*
	 conj
	 'cider.nrepl/cider-middleware
	 'refactor-nrepl.middleware/wrap-refactor)


  (set-env! :dependencies '[;; [spyscope "0.1.6"]
			    [mvxcvi/puget "1.1.2"]]
	    :repositories #(conj % ["elit-maven" {:url "s3p://elit-maven/repo/"}])
	    :wagons '[[s3-wagon-private "1.3.2"]])
   #+END_SRC

** taps

   #+BEGIN_SRC clojure :tangle ~/.boot/profile.boot :ns 'nil
     (require '[puget.printer :as puget])

     (intern 'clojure.core 'pp puget.printer/cprint)

     (add-tap
      (bound-fn*
       (fn [{:keys [filename value pp]}]
         (when (and pp value)
           (puget.printer/cprint value))
         (when filename
           (spit (str filename ".edn")
                 (str (with-out-str (clojure.pprint/pprint value)) "\n")
                 :append true)))))
   #+END_SRC

** Add spyscope to local projects

   #+BEGIN_SRC clojure :tangle ~/.boot/profile.boot :ns 'nil
     ;; (require 'spyscope.core)
     ;; (boot.core/load-data-readers!)
   #+END_SRC

** Debug macro

   (defmacro debug
   "Print debug info."
   [& variables]
   (let [datetime "2011-12-17 01:59:37"
   naked-msg (str "Debug: " datetime " in " *file* "@" (:line
   (meta &form)))]
   (if (empty? variables)
   (println naked-msg)
   `(let [kvs# (zipmap (map #(str % " =>") '~variables)
   (vector ~@variables))]
   (println (str ~naked-msg ":") kvs#)))))

* shell
** theme

  #+BEGIN_SRC sh :tangle ~/.zshrc
    autoload antigen

    source ~/.spacemacs.d/antigen.zsh

    antigen use oh-my-zsh
    antigen bundle git
    antigen bundle zsh-users/zsh-completions
    antigen bundle zdharma/fast-syntax-highlighting
    antigen bundle zsh-users/zsh-autosuggestions
    antigen bundle zsh-users/zsh-history-substring-search
    antigen bundle marzocchi/zsh-notify
    antigen bundle agkozak/zsh-z

    SPACESHIP_PROMPT_ORDER=(
	user          # Username section
	dir           # Current directory section
	host          # Hostname section
	git           # Git section (git_branch + git_status)
	hg            # Mercurial section (hg_branch  + hg_status)
	exec_time     # Execution time
	line_sep      # Line break
	vi_mode       # Vi-mode indicator
	jobs          # Background jobs indicator
	exit_code     # Exit code section
	char          # Prompt character
    )
    SPACESHIP_PROMPT_ADD_NEWLINE=false
    SPACESHIP_CHAR_SYMBOL="❯"
    SPACESHIP_CHAR_SUFFIX=" "
    antigen theme denysdovhan/spaceship-prompt

    antigen apply

  #+END_SRC

** config

  #+BEGIN_SRC sh :tangle ~/.zshrc
    echo loading zsh config
    # Lines configured by zsh-newuser-install

    autoload -Uz compinit
    typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
    if [ $(date +'%j') != $updated_at ]; then
        compinit -i
    else
        compinit -C -i
    fi

    HISTFILE=$HOME/.zsh_history
    HISTSIZE=100000
    SAVEHIST=$HISTSIZE

    setopt hist_ignore_all_dups # remove older duplicate entries from history
    setopt hist_reduce_blanks # remove superfluous blanks from history items
    setopt inc_append_history # save history entries as soon as they are entered
    setopt share_history # share history between different instances of the shell
    setopt auto_cd # cd by typing directory name if it's not a command
    setopt correct_all # autocorrect commands
    setopt auto_list # automatically list choices on ambiguous completion
    setopt auto_menu # automatically use menu completion
    setopt always_to_end # move cursor to end if word had one match
    zstyle ':completion:*' menu select # select completions with arrow keys
    zstyle ':completion:*' group-name '' # group results by category
    zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion

    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down

    bindkey '^l' forward-word
    bindkey '^h' backward-word

    # HISTFILE=~/.histfile
    # HISTSIZE=1000
    # SAVEHIST=1000
    # # End of lines configured by zsh-newuser-install
    # # The following lines were added by compinstall
    # zstyle :compinstall filename '/Users/donavan/.zshrc'

    # autoload -Uz compinit
    # compinit
    # # End of lines added by compinstall
   #+END_SRC

** path
  #+BEGIN_SRC sh :tangle ~/.zshrc
     export PATH="/users/donavan/.composer/vendor/bin:$PATH"
     export PATH="/users/donavan/.cargo/bin:$PATH"
     export PATH="/users/donavan/bin:$PATH"
     export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
  #+END_SRC

** env setup
   #+BEGIN_SRC sh :tangle ~/.zshenv
    export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
    export AWS_DEFAULT_REGION=eu-west-1
    export AWS_REGION=eu-west-1
   #+END_SRC

   #+BEGIN_SRC sh :tangle ~/.zshenv
     function elit-docker-login {
	 eval $(aws ecr get-login --no-include-email --region eu-west-1)
	 #docker pull 689917379567.dkr.ecr.eu-west-1.amazonaws.com/fake-automatic-speech-recogniser:latest
     }
     function aws_creds {
     }
   #+END_SRC

** GPG setup
  #+BEGIN_SRC sh :tangle ~/.zshrc
     GPG_TTY=$(tty)
     export GPG_TTY

     unset GPG_AGENT_INFO
     unset SSH_AGENT_PID
     export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"
     gpgconf --launch gpg-agent
  #+END_SRC

** functions
*** aws

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/aws
    . aws_creds
    /usr/local/bin/aws $*
  #+end_src

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/aws_creds
	 if [ -z "$AWS_ACCESS_KEY_ID" ]; then
	     export AWS_ACCESS_KEY_ID=$(pass elit/aws/donavan/access-key)
	     export AWS_SECRET_ACCESS_KEY=$(pass elit/aws/donavan/secret-key)
	     export GRAFANA_TOKEN=$(pass elit/grafana/api-key)
	     export ELIT_CLI_GITHUB_TOKEN=$(pass elit/github/token)
	 fi
  #+end_src

*** emacsen

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/spacemacs
    open /Applications/Emacs-alt-icon.app -n --args --with-profile spacemacs
  #+end_src

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/emacs
    open /Applications/Emacs.app --args --with-profile emacs
  #+end_src

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/emacs-config-editor
    open /Applications/Emacs-alt-icon.app -n --args --with-profile emacs
  #+end_src

*** elit
**** elit-cli

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/elit
      . aws_creds
      /usr/local/bin/elit $*
  #+end_src
  
**** db connections

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/bt-manatee
    pgcli -h localhost -p 5432 manatee postgres
    #+end_src

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/bt-lionel
    pgcli -h localhost -p 5432 lionel postgres
    #+end_src

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/bt-accounts
    mycli -h localhost -P 3306 -u root -p secret-password accounts
    #+end_src

**** ebtool

   #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/ebtool
     if cd ~/src/ebtool ; then
	 . aws_creds
	 ./ebtool $*
     fi
   #+end_src

**** beethoven

   #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/fire_up
     if cd ~/src/beethoven ; then
	 . aws_creds
	 ./fire-up.sh $*
     fi
   #+end_src

*** boot

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/boot
    . aws_creds
    /usr/local/bin/boot $*
  #+end_src

*** gpg decrypt folder

  #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/encrypt-folder
    read -rsp "Enter passphrase: " PASSPHRASE

    for FILE in $(find "$1" -name '*.gpg'); do
	echo "Extracting $FILE to ${FILE%.gpg}"
	echo "$PASSPHRASE" | gpg --passphrase-fd 0 --batch -d --output "${FILE%.gpg}" "$FILE"
    done
  #+end_src

*** sync movies

    #+begin_src sh :shebang "#!/bin/bash" :tangle ~/bin/sync-movies
      rsync -ahi proxy:/root/Downloads/ ~/Movies/movies\ and\ series/
    #+end_src

** audio conversion

  #+BEGIN_SRC sh :tangle ~/.zshrc
     #find . -type f -name "*.mkv" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -vn -c:a libmp3lame -y "${FILE%.mkv}.mp3";' _ '{}' \;

     #split file
     function split-audio {
         ffmpeg -i "$1" -f segment -segment_time "$2" -c copy "$1"%03d
     }

     function convert-mkv-video-to-opus-audio {
         find . -type f -name "*.mkv" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -c:a copy "${FILE%.mkv}.opus";' _ '{}' \;
     }

     function convert-opus-to-aac {
         find . -type f -name "*.webm" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -c:a libfdk_aac -vbr 5 -cutoff 18000 "${FILE%.webm}.m4a";' _ '{}' \;
     }

     function convert-flac-to-alac {
         find . -type f -name "*.flac" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -acodec alac "${FILE%.flac}.m4a";' _ '{}' \;
     }
  #+END_SRC

* next

#+BEGIN_SRC
mkdir -p ~/.config/next
#+END_SRC

  #+BEGIN_SRC lisp :tangle ~/.config/next/init.lisp
    (in-package :next)
    (define-key *global-map* (key "C-x o") #'function-example)
    ;; (add-to-default-list 'vi-normal-mode 'buffer 'default-modes)

    ;; (define-key :scheme :vi-normal
    ;;   "C-x o" 'example
    ;;   "SPACE" 'scroll-page-down)
  #+END_SRC

* MacOS config

** Use Touch ID for sudo
  /etc/pam.d/sudo

  #+begin_src
    # sudo: auth account password session
    auth       sufficient     pam_tid.so
    auth       sufficient     pam_smartcard.so
    auth       required       pam_opendirectory.so
    account    required       pam_permit.so
    password   required       pam_deny.so
    session    required       pam_permit.so
  #+end_src

* Hosts file

#+BEGIN_SRC conf :tangle ~/src/hosts/myhosts
192.168.0.14 media
#+END_SRC

* brew

  #+BEGIN_SRC sh
    brew install \
         pinentry \
         adr-tools \
         makefile2graph \
         pinentry-mac \
         aspell \
         graphviz \
         ffmpeg \
         flac \
         the_silver_searcher \
         awscli \
         pwgen \
         trash \
         nmap \
         node \
         boot-clj \
         clojure \
         rlwrap \
         siege \
         youtube-dl \
         gnupg \
         pass
#+END_SRC

** ffmpeg
   brew install ffmpeg \
   --with-chromaprint \
   --with-fdk-aac \
   --with-fontconfig \
   --with-freetype \
   --with-frei0r \
   --with-game-music-emu \
   --with-libass \
   --with-libbluray \
   --with-libbs2b \
   --with-libcaca \
   --with-libgsm \
   --with-libmodplug \
   --with-libsoxr \
   --with-libssh \
   --with-libvidstab \
   --with-libvorbis \
   --with-libvpx \
   --with-opencore-amr \
   --with-openh264 \
   --with-openjpeg \
   --with-openssl \
   --with-opus \
   --with-rtmpdump \
   --with-rubberband \
   --with-sdl2 \
   --with-snappy \
   --with-speex \
   --with-tesseract \
   --with-theora \
   --with-tools \
   --with-two-lame \
   --with-wavpack \
   --with-webp \
   --with-x265 \
   --with-xz \
   --with-zeromq \
   --with-zimg

* ssh

  #+BEGIN_SRC conf :tangle ~/.ssh/config
    Host github github.com
    User git
    Hostname github.com
    identityfile ~/.ssh/donavan
    IdentitiesOnly yes

    Host bitbucket bitbucket.org
    User git
    Hostname bitbucket.org
    identityfile ~/.ssh/bitbucket
    IdentitiesOnly yes

    Host proxy
           User root
    Hostname 134.209.87.117
    Identityfile ~/.ssh/donavan
    IdentitiesOnly yes

    Host analytics-importer
    User ec2-user
    ProxyCommand ssh -q jump nc $(aws ec2 describe-instances --filters "Name=tag:Name,Values=analytics-importer*" "Name=instance-state-name,Values=running" --query 'Reservations[0].Instances[0].NetworkInterfaces[0].PrivateIpAddress' --output text) 22
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/elit-dev
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null

    Host media
    User media
    Hostname 192.168.0.14
    IdentityFile ~/.ssh/donavan
    IdentitiesOnly yes
    ForwardAgent yes

    Host builder
    User ec2-user
    ForwardAgent yes
    HostName 10.0.103.177
    IdentityFile ~/.ssh/elit-dev.pem
    ProxyCommand ssh -W %h:%p jump

    Host jump
    User ec2-user
    ForwardAgent yes
    HostName 54.77.144.63
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/elit-dev.pem

    Host test
    User ec2-user
    ForwardAgent yes
    HostName 10.0.103.185
    IdentityFile ~/.ssh/elit-dev.pem
    ProxyCommand ssh -W %h:%p jump
    LocalForward 10001 0.0.0.0:10001
    LocalForward 9000 0.0.0.0:9000

    Host hupu-git
    User gitolite
    Hostname hupu-labs.linode
    Identityfile ~/.ssh/donavan
    IdentitiesOnly yes

    Host ganet
    Hostname 176.58.109.164
    identityfile ~/.ssh/id_rsa_old
    # IdentitiesOnly yes

    Host * !bitbucket.org !github.com

    User donavan

    # ForwardAgents no
    ServerAliveInterval 60

    TCPKeepAlive no

    ControlMaster auto
    ControlPath ~/.ssh/%r@%h:%p
    ControlPersist 4h

    ConnectionAttempts 3

    Compression yes
    Port 22
    EscapeChar ^y

  #+END_SRC

* authinfo

  :tangle ~/.authinfo.gpg
  #+BEGIN_SRC text
machine imap.gmail.com login d.costaras@gmail.com password
machine smtp.gmail.com login d.costaras@gmail.com password
  #+END_SRC

* isync

  #+BEGIN_SRC text :tangle ~/.mbsyncrc
Create Both
# Expunge Both
SyncState *
  #+END_SRC

  #+BEGIN_SRC text :tangle ~/.mbsyncrc
IMAPAccount personal
Host imap.gmail.com
User d.costaras@gmail.com
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine imap.gmail.com login d.costaras@gmail.com/ {print $NF}'"
SSLType IMAPS
AuthMechs LOGIN

IMAPStore personal-remote
Account personal

MaildirStore personal-local
SubFolders Legacy
Path ~/mail/personal/
Inbox ~/mail/personal/inbox
Trash ~/mail/personal/trash

Channel personal-inbox
Master :personal-remote:"INBOX"
# Patterns "INBOX"
Slave :personal-local:inbox

Channel personal-trash
Master :personal-remote:"[Gmail]/Trash"
Slave :personal-local:trash

# Channel personal-sent
# Master :personal-remote:"[Gmail]/Sent Mail"
# Slave :personal-local:sent

Group personal
Channel personal-inbox
Channel personal-trash
# Channel personal-sent

# Gmail mailboxes:
# "All Mail"
# "Drafts"
# "Important"
# "Sent Mail"
# "Spam"
# "Starred"
# "Trash"
  #+END_SRC

  #+BEGIN_SRC text :tangle ~/.mbsyncrc
IMAPAccount work
Host imap.gmail.com
User donavan@englishlanguageitutoring.com
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine imap.gmail.com login donavan@englishlanguageitutoring.com/ {print $NF}'"
SSLType IMAPS
AuthMechs LOGIN

IMAPStore work-remote
Account work

MaildirStore work-local
SubFolders Legacy
Path ~/mail/work/
Inbox ~/mail/work/inbox
Trash ~/mail/work/trash

Channel work-inbox
Master :work-remote:"INBOX"
# Patterns "INBOX"
Slave :work-local:inbox

Channel work-trash
Master :work-remote:"[Gmail]/Trash"
Slave :work-local:trash

# Channel work-sent
# Master :work-remote:"[Gmail]/Sent Mail"
# Slave :work-local:sent

Group work
Channel work-inbox
Channel work-trash
# Channel work-sent

# Gmail mailboxes:
# "All Mail"
# "Drafts"
# "Important"
# "Sent Mail"
# "Spam"
# "Starred"
# "Trash"
  #+END_SRC

* servers
** media
:tangle /ssh:media:~/.bash_profile
#+BEGIN_SRC sh
function sync_movies {
    rsync -ahi proxy:/root/Downloads/ ~/to-sort
}
export -f sync_movies
#+END_SRC

** proxy

   #+BEGIN_SRC sh
    # ~/.bashrc: executed by bash(1) for non-login shells.
    # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
    # for examples

    # If not running interactively, don't do anything
    [ -z "$PS1" ] && return

    # don't put duplicate lines in the history. See bash(1) for more options
    # ... or force ignoredups and ignorespace
    HISTCONTROL=ignoredups:ignorespace

    # append to the history file, don't overwrite it
    shopt -s histappend

    # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    HISTSIZE=1000
    HISTFILESIZE=2000

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
            # We have color support; assume it's compliant with Ecma-48
            # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
            # a case would tend to support setf rather than setaf.)
            color_prompt=yes
        else
            color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
        xterm*|rxvt*)
            PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
            ;;
        ,*)
            ;;
    esac

    # enable color support of ls and also add handy aliases
    if [ -x /usr/bin/dircolors ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias ls='ls --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi

    # some more ls aliases
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'

    # Alias definitions.
    # You may want to put all your additions into a separate file like
    # ~/.bash_aliases, instead of adding them here directly.
    # See /usr/share/doc/bash-doc/examples in the bash-doc package.

    if [ -f ~/.bash_aliases ]; then
        . ~/.bash_aliases
    fi

    # enable programmable completion features (you don't need to enable
    # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
    # sources /etc/bash.bashrc).
    #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    #    . /etc/bash_completion
    #fi

    export GOPATH=$HOME/work
    export PATH=$PATH:/usr/lib/go-1.10/bin:$GOPATH/bin

    function torrent {
        $FOO=$(torrengo "the incredible hulk")
    }
   #+END_SRC

*** torrench

    #+BEGIN_SRC conf
     [Torrench-Config]

     ## Torrench - Command-line torrent search program
     ## project by @kryptxy
     ## github: https://github.com/kryptxy/torrench
     ## Configuration file for TPB/KAT/SkyTorrents indexing

     ## *nix users (Linux, MacOS..): Default config directory is $XDG_CONFIG_HOME/torrench/
     ## If not set, fallback to $HOME/.config/torrench/
     ## (Create missing directories)
     ## Windows: Default directory is:
     ## C:\Users\<user>\.config\torrench\

     ## WARNING: Some of the content hosted on these sites is illegal
     ## and downloading those contents can get you into serious troubles.
     ## Use it at your own risk.
     ## Using this is completely optional.
     ## You have been warned.

     TPB_URL = https://thepiratebay.org  https://proxybay.one
     SKY_URL = https://www.skytorrents.in

     ## KAT Proxy is quite shaky, and might not work at all times
     ## I have been unable to find any reliable KAT proxy.
     ## If you know of some working proxy, you can edit KAT_URL with that working proxy
     ## Simply append the proxy (either in the beginning or at the end)
     ## Update me if it works?
     ## Alternatively, use TPB/SkyTorrent. They are pretty reliable and work most of the time.

     KAT_URL = https://kickass.cd/ https://kickass.unblocked.bid/ https://kickass.unlockproj.faith/
     NYAA_URL = https://nyaa.si/
     XBIT_URL = https://xbit.pw/
     RARBG_URL = https://torrentapi.org/pubapi_v2.php?
     1337X_URL = https://1337x.to https://1337x.unblockall.org https://proxyportal.net/1337x-proxy
     IDOPE_URL = https://idope.se
     LIBGEN_URL = http://libgen.io/
     LIMETORRENTS_URL = https://limetorrents.cc https://swaptorrents.com

     ## To enable TPB indexing,
     ## set enable = 1
     enable = 1
    #+END_SRC

* karabiner

#+BEGIN_SRC json :tangle ~/.config/karabiner/assets/complex_modifications/control-delete.json
{
    "title": "Control delete to backward delete word",
    "rules": [
        {
            "description": "Control delete to backward delete word",
            "manipulators": [
                {
                    "type": "basic",
                    "from": {
                        "key_code": "delete_or_backspace",
                        "modifiers": {
                            "mandatory": [
                                "left_control"
                            ]
                        }
                    },
                    "to": [
                        {
                            "key_code": "delete_or_backspace",
                            "modifiers": [
                                "left_alt"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
#+END_SRC
